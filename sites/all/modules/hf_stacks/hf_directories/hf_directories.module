<?php
/**
 * Main Module File of the Directory Listing Module
 * @author Bryan Lam
 */

/**
 * Implements hook_module()
 *
 * @return array
 */
function hf_directories_menu() {
    $items = array();
    $items['directorylisting'] = array(
        'title' => 'Directory Listing',
        'page callback' => 'hf_directories_main',
        'menu_name' => 'main-menu',
        'access callback' => TRUE,
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * Implements hook_theme()
 */
function hf_directories_theme() {
    return array(
        'directories_page' => array(
            'template' => 'templates/hf-directories',
            'variables' => array(),
        ),
    );
}

/**
 * @page Main Page of Directory Listing
 *
 * This function builds the content for the directories page. Queries the database for all
 * directory listing nodes and returns array to the tpl file.
 */
function hf_directories_main() {
    // retrieve query string, if available.
    $query_params = drupal_get_query_parameters();

    //Query the fields needed for listing
    $query = db_select('node', 'n')->extend('PagerDefault')->limit(10);
    $query->leftJoin('field_data_field_phone_number_listing', 'phone', 'phone.entity_id = n.nid');
    $query->leftJoin('field_data_field_job_title_listing', 'titlelisting', 'titlelisting.entity_id = n.nid');
    $query->leftJoin('field_data_body', 'd', 'd.entity_id = n.nid');
    $query->leftJoin('field_data_field_email', 'email', 'email.entity_id = n.nid');
    $query->leftJoin('field_data_field_twitter_link', 'twitter', 'twitter.entity_id = n.nid');
    $query->leftJoin('field_data_field_linkedin_link', 'linkedin', 'linkedin.entity_id = n.nid');
    $query->leftJoin('field_data_field_facebook_link', 'facebook', 'facebook.entity_id = n.nid');
    $query->fields('n', array('title', 'created', 'nid'));
    $query->fields('twitter', array('field_twitter_link_url', 'field_twitter_link_title'));
    $query->fields('linkedin', array('field_linkedin_link_url', 'field_linkedin_link_title'));
    $query->fields('facebook', array('field_facebook_link_url', 'field_facebook_link_title'));
    $query->fields('titlelisting', array('field_job_title_listing_value'));
    $query->fields('phone', array('field_phone_number_listing_number', 'field_phone_number_listing_country_codes'));
    $query->fields('d', array('body_value'));
    $query->fields('email', array('field_email_email'));
    $query->condition('n.type', 'directory_listing', '=');
    $query->orderBy('created', 'DESC');
    $directories = $query->execute()->fetchAll();

    //Grab all news taxonomy terms
    $types = get_types();

    //If there are taxonomy terms, check to see if filters are set for taxonomy
    if(count($types) > 0) {
        foreach ($types as $type) {
            if ($query_params['filter'] == strtolower($type->name)) {
                //If there is a filter, overwrite previous query set
                $query->join('field_data_field_directory_listing_type', 'directory_type', 'directory_type.entity_id = n.nid');
                $query->join('taxonomy_term_data', 'directory_term', 'directory_term.tid = directory_type.field_directory_listing_type_tid');
                $query->condition('directory_term.name', $type->name, '=');
                $directories = $query->execute()->fetchAll();
            }
        }
    }

    //Return results with pagination
    $output = theme('directories_page', array('directories' => $directories));
    $output .= theme('pager');
    return $output;
}

/**
 * @form hf_directories_form_filter
 */
function hf_directories_form_filter($form, &$form_state) {
    $query_params = drupal_get_query_parameters();
    $form = array();

    $types = get_types();

    //Initial Options to populate select list
    $options = array(
      'all' => t('All')
    );

    //Populate options array with directory types used
    foreach($types as $type) {
        $options[strtolower($type->name)] = t($type->name);
    }

    //Filter
    $form['filter'] = array(
      '#type' => 'select',
      '#title' => t('Filter'),
      '#options' => $options,
      '#default_value' => (isset($query_params['filter'])) ? $query_params['filter'] : 'all',
    );

    //Submit Button
    $form['buttons']['filter'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
    );

    if($types) {
        return $form;
    } else {
        return null;
    }
}

/**
 * Queries the database for all terms in taxonomy
 * @return array of types
 */
function get_types(){
    //Query all directory listing types used
    $query = db_select('field_data_field_directory_listing_type', 'directory_type')->distinct();
    $query->join('taxonomy_term_data', 'directory_term', 'directory_term.tid = directory_type.field_directory_listing_type_tid');
    $query->fields('directory_term', array('name'));
    $types = $query->execute()->fetchAll();

    return $types;
}

/**
 * Implements drupal_form_submit
 * @param $form
 * @param $form_state
 */
function hf_directories_form_filter_submit(&$form, &$form_state) {
    $selectedFilter = $form_state['values']['filter'];

    drupal_goto("directorylisting", array('query' => array('filter' => $selectedFilter)));
}

/**
 * This formats the phone number based on country code.
 *
 * Code borrowed and modified from Phone Module.
 *
 * @param $countrycode
 * @param $phonenumber
 * @return string
 */
function hf_format_phone_number($countrycode, $phonenumber) {
    $countrycode = trim($countrycode);
    $phonenumber = trim($phonenumber);

    // define regular expression
    $regex = '/
    \D*            # ignore non-digits
    (\d*)          # an optional 1
    \D*            # optional separator
    ([2-9][0-8]\d) # area code (Allowed range of [2-9] for the first digit, [0-8] for the second, and [0-9] for the third digit)
    \D*            # optional separator
    ([2-9]\d{2})   # 3-digit prefix (cannot start with 0 or 1)
    \D*            # optional separator
    (\d{4})        # 4-digit line number
    \D*            # optional separator
    (\d*)          # optional extension
    \D*            # ignore trailing non-digits
    /x';

    //If Phone Number is American or Canadian format the number.
    if($countrycode == 'us' || $countrycode == 'ca') {
        // get digits of phone number
        preg_match($regex, $phonenumber, $matches);

        $separator = '-';

        // construct ten-digit phone number
        $phonenumber = '(' . $matches[2] . ') ' . $matches[3] . $separator . $matches[4];

        // Optional extension
        if ($matches[5] != '') {
            $phonenumber .= ' x' . $matches[5];
        }

    }

    $countryCode = hf_phone_country_code_convert(strtoupper($countrycode));

    $phonenumber = $countryCode . '-' . $phonenumber;

    return $phonenumber;
}

/**
 * Returns the country code in the desired format based on the inputted country code.
 * Array of country codes retrieved from http://www.codematrics.com/array-of-country-name-code-and-dial-code-in-php/.
 *
 * @param $inputcode
 *   Country code to convert in 2 letter Uppercase string)
 * @return
 *   Converted country code
 */
function hf_phone_country_code_convert($inputcode) {
    $country_array = array(
        "AF"=>"+93",
        "AX"=>"+358",
        "AL"=>"+355",
        "DZ"=>"+213",
        "AS"=>"+1",
        "AD"=>"+376",
        "AO"=>"+244",
        "AI"=>"+1",
        "AQ"=>"+672",
        "AG"=>"+1",
        "AR"=>"+54",
        "AM"=>"+374",
        "AW"=>"+297",
        "AU"=>"+61",
        "AT"=>"+43",
        "AZ"=>"+994",
        "BS"=>"+1",
        "BH"=>"+973",
        "BD"=>"+880",
        "BB"=>"+1",
        "BY"=>"+375",
        "BE"=>"+32",
        "BZ"=>"+501",
        "BJ"=>"+229",
        "BM"=>"+1",
        "BT"=>"+975",
        "BO"=>"+591",
        "BA"=>"+387",
        "BW"=>"+267",
        "BV"=>"+55",
        "BR"=>"+55",
        "IO"=>"+246",
        "VG"=>"+1",
        "BN"=>"+673",
        "BG"=>"+359",
        "BF"=>"+226",
        "BI"=>"+257",
        "KH"=>"+855",
        "CM"=>"+237",
        "CA"=>"+1",
        "CV"=>"+238",
        "KY"=>"+1",
        "CF"=>"+236",
        "TD"=>"+235",
        "CL"=>"+56",
        "CN"=>"+86",
        "CX"=>"+61",
        "CC"=>"+891",
        "CO"=>"+57",
        "KM"=>"+269",
        "CD"=>"+243",
        "CG"=>"+242",
        "CK"=>"+682",
        "CR"=>"+506",
        "CI"=>"+225",
        "HR"=>"+385",
        "CU"=>"+53",
        "CY"=>"+357",
        "CZ"=>"+420",
        "DK"=>"+45",
        "DJ"=>"+253",
        "DM"=>"+1",
        "DO"=>"+1",
        "EC"=>"+593",
        "EG"=>"+20",
        "SV"=>"+503",
        "GQ"=>"+240",
        "ER"=>"+291",
        "EE"=>"+372",
        "ET"=>"+251",
        "FO"=>"+298",
        "FK"=>"+500",
        "FJ"=>"+679",
        "FI"=>"+358",
        "FR"=>"+33",
        "GF"=>"+594",
        "PF"=>"+689",
        "TF"=>"+262",
        "GA"=>"+241",
        "GM"=>"+220",
        "GE"=>"+995",
        "DE"=>"+49",
        "GH"=>"+233",
        "GI"=>"+350",
        "GR"=>"+30",
        "GL"=>"+299",
        "GD"=>"+1",
        "GP"=>"+590",
        "GU"=>"+1",
        "GT"=>"+502",
        "GG"=>"+44",
        "GN"=>"+224",
        "GW"=>"+245",
        "GY"=>"+592",
        "HT"=>"+509",
        "HM"=>"-",
        "VA"=>"+39",
        "HN"=>"+504",
        "HK"=>"+852",
        "HU"=>"+36",
        "IS"=>"+354",
        "IN"=>"+91",
        "ID"=>"+62",
        "IR"=>"+98",
        "IQ"=>"+964",
        "IE"=>"+353",
        "IM"=>"+44",
        "IL"=>"+972",
        "IT"=>"+39",
        "JM"=>"+1",
        "JP"=>"+81",
        "JE"=>"+44",
        "JO"=>"+962",
        "KZ"=>"+7",
        "KE"=>"+254",
        "KI"=>"+686",
        "KP"=>"+850",
        "KR"=>"+82",
        "KW"=>"+965",
        "KG"=>"+996",
        "LA"=>"+856",
        "LV"=>"+371",
        "LB"=>"+961",
        "LS"=>"+266",
        "LR"=>"+231",
        "LY"=>"+218",
        "LI"=>"+423",
        "LT"=>"+370",
        "LU"=>"+352",
        "MO"=>"+853",
        "MK"=>"+389",
        "MG"=>"+261",
        "MW"=>"+265",
        "MY"=>"+60",
        "MV"=>"+960",
        "ML"=>"+223",
        "MT"=>"+356",
        "MH"=>"+692",
        "MQ"=>"+596",
        "MR"=>"+222",
        "MU"=>"+230",
        "YT"=>"+262",
        "MX"=>"+52",
        "FM"=>"+691",
        "MD"=>"+373",
        "MC"=>"+377",
        "MN"=>"+976",
        "ME"=>"+382",
        "MS"=>"+1",
        "MA"=>"+212",
        "MZ"=>"+258",
        "MM"=>"+95",
        "NA"=>"+264",
        "NR"=>"+674",
        "NP"=>"+977",
        "AN"=>"+599",
        "NL"=>"+31",
        "NC"=>"+687",
        "NZ"=>"+64",
        "NI"=>"+505",
        "NE"=>"+227",
        "NG"=>"+234",
        "NU"=>"+683",
        "NF"=>"+672",
        "MP"=>"+1",
        "NO"=>"+47",
        "OM"=>"+968",
        "PK"=>"+92",
        "PW"=>"+680",
        "PS"=>"+970",
        "PA"=>"+507",
        "PG"=>"+675",
        "PY"=>"+595",
        "PE"=>"+51",
        "PH"=>"+63",
        "PN"=>"+64",
        "PL"=>"+48",
        "PT"=>"+351",
        "PR"=>"+1",
        "QA"=>"+974",
        "RE"=>"+262",
        "RO"=>"+40",
        "RU"=>"+7",
        "RW"=>"+250",
        "BL"=>"+590",
        "SH"=>"+290",
        "KN"=>"+1",
        "LC"=>"+1",
        "MF"=>"+590",
        "PM"=>"+508",
        "VC"=>"+1",
        "WS"=>"+685",
        "SM"=>"+378",
        "ST"=>"+239",
        "SA"=>"+966",
        "SN"=>"+221",
        "RS"=>"+381",
        "SC"=>"+248",
        "SL"=>"+232",
        "SG"=>"+65",
        "SK"=>"+421",
        "SI"=>"+386",
        "SB"=>"+677",
        "SO"=>"+252",
        "ZA"=>"+27",
        "GS"=>"+500",
        "ES"=>"+34",
        "LK"=>"+94",
        "SD"=>"+249",
        "SR"=>"+597",
        "SJ"=>"+47",
        "SZ"=>"+268",
        "SE"=>"+46",
        "CH"=>"+41",
        "SY"=>"+963",
        "TW"=>"+886",
        "TJ"=>"+992",
        "TZ"=>"+255",
        "TH"=>"+66",
        "TL"=>"+670",
        "TG"=>"+228",
        "TK"=>"+690",
        "TO"=>"+676",
        "TT"=>"+1",
        "TN"=>"+216",
        "TR"=>"+90",
        "TM"=>"+993",
        "TC"=>"+1",
        "TV"=>"+688",
        "UG"=>"+256",
        "UA"=>"+380",
        "AE"=>"+971",
        "GB"=>"+44",
        "US"=>"+1",
        "UM"=>"+699",
        "VI"=>"+1",
        "UY"=>"+598",
        "UZ"=>"+998",
        "VU"=>"+678",
        "VE"=>"+58",
        "VN"=>"+84",
        "WF"=>"+681",
        "EH"=>"+212",
        "YE"=>"+967",
        "ZM"=>"+260",
        "ZW"=>"+263",
    );

    return $country_array[$inputcode];


}