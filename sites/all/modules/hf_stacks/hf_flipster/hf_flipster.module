<?php
/**
 * Main Module File of the Flipster Import Module
 * @author Bryan Lam
 */

/**
 * Implements hook_module()
 *
 * @return array
 */
function hf_flipster_menu() {
    $items = array();
//    $items['flipster'] = array(
//        'title' => t('Flipster Import'),
//        'page callback' => 'hf_flipster_load',
//        'access arguments' => array('access content'),
//        'type' => MENU_NORMAL_ITEM,
//    );
    $items['admin/config/stacks/flipster'] = array(
        'title' => 'Flipster Integration',
        'description' => 'Flipster integration.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hf_flipster_form'),
        'access arguments' => array('administer stacks config'),
        'file' => 'hf_flipster.admin.inc'
    );
    return $items;
}
/**
 * This function calls the curl function to retrieves the individual search results from flipster, creates a node and
 * populates its field collection fields.
 *
 * It will download the image file from the pulled image url and save it to sites/all/default/files directory.
 *
 * @param $url (string) inputted url from the flipster site.
 * @return none
 */
function hf_flipster_load($url, $listTitle) {

    global $user;

    $scraped_page = curl($url);
    //dpm($scraped_page);
    $errorPage = scrape_between($scraped_page, "<a href=\"http://www.ebscohost.com/\" title=\"[EBSCO publishing]\"><img src=\"", "/ep_name.gif\"");
    //dpm($errorPage);
    if($errorPage == "ErrorImages") {
        drupal_set_message(t("Your session has been timed out on Flipster. Please log in again and try importing the flipster list again."), 'error');
    } else {
        $scraped_data = scrape_between($scraped_page, "<div id=\"resultListControl\" class=\"content-wrapper \">", "<div id=\"column1\" class=\"collapsible\">");
        //Accounts for the space after the class tag in the DIV tags.
        if($scraped_data !== null) {
            $scraped_data = scrape_between($scraped_page, "<div id=\"resultListControl\" class=\"content-wrapper \" >", "<div id=\"column1\" class=\"collapsible\" >");
            if($scraped_data == null) {
                drupal_set_message(t("Unable to retrieve flipster content. Please contact support."));
            }
        }

        //Node is created for this single flipster magazine
        $node = new stdClass();
        $node->type = "flipster";
        node_object_prepare($node);
        $node->title = $listTitle;
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->status = 1;
        $node->promote = 0;
        $node->comment = 1;

        $node = node_submit($node);
        node_save($node);

        //Explode the results into an array of results
        $separate_results = explode("div class=\"result-list-record\">", $scraped_data);
        //Removes the Header Tag from the Array
        array_shift($separate_results);
        //dpm($separate_results);

        $count = count($separate_results);

        if($count == 0) {
            drupal_set_message(t('No results were imported. Please make sure appropriate flipster url was entered.'), 'error');
        } else {
            foreach($separate_results as $key=>$separate_result) {
                if($separate_result != "") {
                    try
                    {
                        //Scrape Information
                        $title = scrape_between($separate_result, "class=\"title-link color-p4\"><strong>", "</strong></a></h3>");
                        $image_url = str_replace('\u0026', '&', scrape_between($separate_result, "ThumbImageUrl&quot;:&quot;", "r&quot;,&quot;DetailImageUrl")) . 'l';
                        $url = 'http://web.b.ebscohost.com' . str_replace('&amp;', '&', scrape_between($separate_result, "href=\"", "\" class=\"title"));
                        //$url = 'http://search.ebscohost.com/login.aspx?authtype=ip,cpid&custid=mip&profile=eon';
                        $publisher = scrape_between($separate_result, "Publisher: </strong>", "<strong>ISSN/eISSN:");
                        $issn = scrape_between($separate_result, "<strong>ISSN/eISSN: </strong>", "<strong>Categories: </strong>");
                        $category = scrape_between($separate_result, "<strong>Categories: </strong>", "<br /><strong>Description: </strong>");
                        $description = scrape_between($separate_result, "<strong>Description: </strong>", "<div class=\"record-formats-wrapper externalLinks\">");

                        //dpm($title);
                        //Create a Field Collection for this Node
                        $createdNode = node_load($node->nid);
                        //dpm($createdNode);

                        // 1. This creates the new entity of the field_flipster_info field collection
                        $entity = entity_create('field_collection_item', array('field_name' => 'field_flipster_info'));
                        // 2. This attaches the new field collection item to the node that was created.
                        $entity->setHostEntity('node', $createdNode);
                        //dpm($createdNode);
                        $entity->save();

                        //dpm($entity);
                        $image_name = 'flipster-' . $createdNode->nid . '-' . $entity->item_id . '.jpg';
                        $saved = download_image($image_url, "sites/default/files/" . $image_name);


                        updateFieldCollection($createdNode,
                            'field_flipster_info',
                            array(
                                'field_flipster_title'          => $title,
                                'field_image_url'               => ($saved) ? file_create_url(file_build_uri($image_name)) : '',
                                'field_url'                     => $url,
                                'field_flipster_publisher'      => $publisher,
                                'field_flipster_issn'           => $issn,
                                'field_flipster_category'       => $category,
                                'field_flipster_description'    => $description,
                            ),
                            $key);


                        //node_save($createdNode);
                    }
                    catch(Exception $e)
                    {
                        //Display error message if something goes wrong.
                        drupal_set_message(t('Unable to retrieve flipster information at this time, please try again later!'), 'error');
                        watchdog('module', 'Error while saving a node. Message: !message', array('!message' => $e->getMessage()), WATCHDOG_ERROR);
                    }
                }
            }
            //Display Success Message
            drupal_set_message($count . t(' flipster articles have successfully been imported from Flipster!'));
        }
    }
}

/**
 * Implements hook_node_delete. It checks to see if there is a file associated with the flipster node and deletes it before the node is destroyed.
 * @param $node (node) that is being deleted
 */
function hf_flipster_node_delete($node) {
    //dpm($node->nid);
    //Path to the Image File curl from Flipster
    $path = 'sites/default/files/';

    if($node->type == 'flipster') {

        $items = field_get_items('node', $node, 'field_flipster_info');
        foreach ($items as $item) {
            $field_collection_item = field_collection_item_load($item['value']);
            //dpm($field_collection_item);

            $filename = 'flipster-' . $node->nid . '-' . $field_collection_item->item_id . '.jpg';

            if (file_exists($path . $filename)) {
                //dpm("File Exists");
                //Deletes the Image File
                unlink($path . $filename);
            }
        }

    }
}

/**
 * Initiates curl to grab information from a given url.
 * @param $url (string) the url to grab data from.
 * @return mixed
 */
function curl($url) {
    $options = array(
        CURLOPT_RETURNTRANSFER => TRUE,  // Setting cURL's option to return the webpage data
        CURLOPT_FOLLOWLOCATION => TRUE,  // Setting cURL to follow 'location' HTTP headers
        CURLOPT_AUTOREFERER => TRUE, // Automatically set the referer where following 'location' HTTP headers
        CURLOPT_CONNECTTIMEOUT => 120,   // Setting the amount of time (in seconds) before the request times out
        CURLOPT_TIMEOUT => 120,  // Setting the maximum amount of time for cURL to execute queries
        CURLOPT_MAXREDIRS => 10, // Setting the maximum number of redirections to follow
        CURLOPT_USERAGENT => "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8",  // Setting the useragent
        CURLOPT_URL => $url, // Setting cURL's URL option with the $url variable passed into the function
    );

    $ch = curl_init();
    curl_setopt_array($ch, $options);
    $data = curl_exec($ch);
    curl_close($ch);
    return $data;
}

/**
 * This function returns the desired information between the supplied starting and ending strings given.
 *
 * @param $data The information returned from the curled url.
 * @param $start The starting start to begin scraping.
 * @param $end The ending string to stop scraping.
 * @return string The desired string that is to extracted.
 */
function scrape_between($data, $start, $end){
    $data = stristr($data, $start); // Stripping all data from before $start
    $data = substr($data, strlen($start));  // Stripping $start
    $stop = stripos($data, $end);   // Getting the position of the $end of the data to scrape
    $data = substr($data, 0, $stop);    // Stripping all data from after and including the $end of the data to scrape
    return $data;   // Returning the scraped data from the function
}

/**
 * This function updates the individual fields in a field collection.
 *
 * @param $node (obj) node object returned from node_load()
 * @param $collection (string) can be found in drupal admin interface:
 *                          structure > field collections > field name
 * @param array $fields (array) see usage below
 * @param int $index the index to the element you wish to edit
 */
function updateFieldCollection($node, $collection, $fields = Array(), $index) {
    if ($node && $collection && !empty($fields)) {
        // Get the field collection ID
        $eid = $node->{$collection}[LANGUAGE_NONE][$index]['value'];

        // Load the field collection with the ID from above
        $entity = entity_load_single('field_collection_item', array($eid));

        // Wrap the loaded field collection which makes setting/getting much easier
        $node_wrapper = entity_metadata_wrapper('field_collection_item', $entity);

        // Loop through our fields and set the values
        foreach ($fields as $field => $data) {
            $node_wrapper->{$field}->set($data);
        }

        // Once we have added all the values we wish to change then we need to
        // save. This will modify the node and does not require node_save() so
        // at this point be sure it is all correct as this will save directly
        // to a published node
        $node_wrapper->save(true);
    }
}

/**
 * This function downloads the image by supplying the image url and a filepath and filename.
 *
 * @param $image_url (string) the url of the image.
 * @param $image_file (string) the path and filename that is to be saved.
 */
function download_image($image_url, $image_file){
    if(file_get_contents($image_url)) {
        $ch = curl_init($image_url);
        $fp = fopen ($image_file, 'w+');              // open file handle
        // curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // enable if you want
        curl_setopt($ch, CURLOPT_FILE, $fp);          // output to file
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 1000);      // some large value to allow curl to run for a long time
        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0');
        // curl_setopt($ch, CURLOPT_VERBOSE, true);   // Enable this line to see debug prints
        curl_exec($ch);

        curl_close($ch);                              // closing curl handle
        fclose($fp);                                  // closing file handle

        return true;
    }
    return false;
}

