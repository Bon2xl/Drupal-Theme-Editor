<?php
/**
 * HF Search Bento
 *
 * Enables the creation of blocks that can be placed in a page with panels that
 * displays search results from solr, eds, polaris or sirsi.
 */

require_once('api/EBSCODocument.php');
require_once('api/EBSCODocumentPub.php');
require_once('./' . drupal_get_path('module', 'hf_stacks_auth') . '/api/hf_stacks_auth.abstract.class.inc');
require_once('./' . drupal_get_path('module', 'hf_stacks_auth') . '/api/hf_stacks_auth.polaris.class.inc');
require_once('./' . drupal_get_path('module', 'hf_stacks_auth') . '/api/hf_stacks_auth.sirsi.class.inc');

/**
 * Implements hook_menu()
 */
function hf_search_bento_menu() {
  $items = array();

  $items['searchbento/eds'] = array(
    'title' => '',
    'page callback' => 'eds_ajax_call',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implementation of hook_ctools_plugin_directory()
 */
function hf_search_bento_ctools_plugin_directory($module, $plugin) {
  if($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/' . $plugin;
  }
}

/**
 * An associative array of all source types to generate blocks.
 *
 * The key is the $delta of the block.
 * The Value is used to determine which sourceType or contentType to query from EDS or Solr.
 *
 * @return array
 */
function _hf_process_array() {

  $blocksArray = array(
    //SOLR Blocks (Make sure a SOLR index has been created that has the same name as the value)
    'Internal Search' => array(
      '1_news_News' => 'News',
      '1_databases_Databases' => 'Databases',
      '1_events_Events' => 'Events',
      '1_directory listing_Directory Listing' => 'Directory Listings',
    ),
    //EDS
    'EDS Search' => array(
      '2_books_Books' => 'Books',
      '2_ebooks_eBooks' => 'eBooks',
      '2_allbooks_AllBooks' => 'Books & Ebooks',
      '2_academic journals_Academic Journals' => 'Academic Journals',
      '2_audiovisual_AV' => 'Audio-Visual',
      '2_everything_Everything' => 'Everything',
      '2_else_Else' => 'Everything Else',
      /*
      '2_books_Books' => 'Books',
      '2_ebooks_eBooks' => 'eBooks',
      '2_audio_Audio' => 'Audio',
      '2_videos_Videos' => 'Videos',
      '2_academic journals_Academic Journals' => 'Academic Journals',
      '2_magazines_Magazines' => 'Magazines',
      '2_reviews_Reviews' => 'Reviews',
      '2_reports_Reports' => 'Reports',
      '2_news_News' => 'News',
      '2_electronic resources_Electronic Resources' => 'Electronic Resources',
      '2_conference materials_Conference Materials' => 'Conference Materials',
      '2_non-print resources_Non-Print Resources' => 'Non-Print Resources',
      '2_dissertations_Dissertations' => 'Dissertations',
      '2_music scores_Music Scores' => 'Music Scores',
      '2_primary source documents_Primary Source Documents' => 'Primary Source Documents',
      '2_biographies_Biographies' => 'Biographies',
      */
    ),
    //Polaris
    'Polaris Search' => array(
      '3_abk_Audio-book' => "Audio-books",
      '3_bks_Book' => "Books",
      '3_ebk_Ebook' => "eBooks",
      '3_pallbooks_AllBooks' => 'Books & Ebooks',
      '3_mcd_Music' => "Music",
      '3_vid_Videorecording' => "Videos",
      '3_peverything_Everything' => 'Everything',
      '3_pelse_Else' => 'Everything Else',
      /*
      '3_abk_Audio-book' => "Audio",
      '3_bks_Book' => "Books",
      '3_vid_Videorecording' => "Videos",
      '3_ebk_Ebook' => "eBooks",
      */
      /*
      '3_abk_Audio-book' => "Audio-book",
      '3_bks_Book' => "Book",
      '3_dvd_DVD' => "DVD",
      '3_ebk_Ebook' => "Ebook",
      '3_elr_E-resources' => "E-resources",
      '3_glb_Globe' => "Globe",
      '3_lpt_Large print' => "Large print",
      '3_map_Map' => "Map",
      '3_mot_Motion picture' => "Motion picture",
      '3_mcd_Music CD' => "Music CD",
      '3_msr_Musical recording' => "Musical recording",
      '3_new_Newspaper' => "Newspaper",
      '3_nsr_Nonmusical recording' => "Nonmusical recording",
      '3_per_Periodical' => "Periodical",
      '3_pgr_Projected' => "Projected",
      '3_ser_Serial' => "Serial",
      '3_rec_Sound recording' => "Sound recording",
      '3_art_3D object' => "3D object",
      '3_ngr_2D graphic' => "2D graphic",
      '3_vid_Videorecording' => "Videorecording",
      '3_vcr_Videotape' => "Videotape",
      '3_dmc_Digital Collection' => "Digital Collection",
      '3_abs_Abstract' => "Abstract",
      '3_brd_Blu-ray Disc' => "Blu-ray Disc",
      '3_aeb_Audio Ebook' => "Audio Ebook",
      '3_bcd_Book + CD' => "Book + CD",
      '3_bcs_Book + Cassette' => "Book + Cassette",
      */
    ),
    //Sirsi
    'Sirsi Search' => array(
      '4_all_Sirsi All' => 'Sirsi All',
    ),
    //EBSCO PUBLICATIONS
    'Publications' => array(
      '5_all_All Publications' => 'EDS - All Publications',
    ),
  );

  return $blocksArray;
}

/**
 * Main Function that dictates which tpl file to output.
 *
 * @param $delta        string    The $delta (id) of the generated block created in block_hook_info().
 * @param $sourceType   string    The value passed from the blocksArray (e.g., News, Academic Journals, etc.)
 * @param $platformType int       The extracted integer from the key which specifies which platform is being used.
 *                                    1: Solr
 *                                    2: EDS
 *                                    3: Polaris
 *                                    4: Sirsi (Partially Implemented)
 * @return theme
 */

//Videos
//Audio

function _hf_search_bento_block_main($delta, $sourceType, $platformType, $limit, $title) {
  _hf_load_script_files();
  //Grab Parameters from URL
  $params = drupal_get_query_parameters();

  //Grab Query string from query string "bentoq"
  $query = $params['bentoq'];
  switch($platformType) {
    //Perform SOLR search with extracted query string and return the hf-searchbento-solr-search theme file.
    case 1:
      try{
        //Function called to hf_stacks_search_solr module.
        if (!empty($query)) {
          $results = _hf_solr_search($query, $sourceType, false, $limit);
        }

        if($results != null) {
          $collections = [];
          $resultCount = array_pop($results);

          foreach($results as $key => $result) {
            if($key != count($results)) {
              $publicationType = $result['type'];

              if(isset($collections[$publicationType])) {
                array_push($collections[$publicationType], $result);
              } else {
                $collections[$publicationType] = [$result];
              }
            }
          }
        } else {
          $collections = null;
        }
        
        return theme('solr_search',
          array(
            'query'=> $query,
            'limit'=> $limit,
            'collections' => $collections,
            'sourceType' => $sourceType,
            'resultCount' => $resultCount
          ));
      } catch (Exception $e) {
        //If exception caught, log error to dblogging.
        watchdog('hf_search_bento', 'Lost connection to Solr Server %e', array('%e' => $e), WATCHDOG_ERROR);
      }
      break;

    //Perform EDS search with extracted query string and return the hf-searchbento-eds-search theme file.
    case 2:
      if ($sourceType == 'AV') {
        $sourceType = 'Audio-Visual';
      }
      if ($sourceType == 'AllBooks') {
        $sourceType = 'Books & eBooks';
      }
      if ($sourceType == 'Else') {
        $sourceType = 'Everything Else';
      }

      //Add variables to be processed by the javascript
      drupal_add_js(array(
        'hf_search_bento' => array(
          'query'=> $query,
          'platform' => array($platformType),
          'names' => array($sourceType),
          'delta' => array($delta),
          'limit'=> array($limit),
          'title' => $title
        )),
        array(
          'type' => 'setting'
        ));

      return theme('eds_search',
        array(
          'delta' => $delta,
          'sourceType' => $sourceType,
          'title' => $title
        ));
      break;

    //Perform Polaris Search
    case 3:
      $catalogueURL = variable_get('stacks_search_polaris_catalogue_url');
      //Add variables to be processed by the javascript
      drupal_add_js(array(
        'hf_search_bento' => array(
          'query'=> $query,
          'platform' => array($platformType),
          'names' => array($sourceType),
          'delta' => array($delta),
          'limit' => $limit
        )),
        array(
          'type' => 'setting'
        ));

      return theme('polaris_search',
        array(
          'query'=>$query,
          'delta'=> $delta,
          'sourceType' => $sourceType,
          'platform' => $platformType,
          'catalogueUrl' => $catalogueURL
        ));
      break;

    //Perform Sirsi Search
    case 4:
      $opacURL = variable_get('stacks_search_sirsi_catalogue_url');
      drupal_add_js(array(
        'hf_search_bento' => array(
          'query'=> $query,
          'platform' => array($platformType),
          'names' => array($sourceType),
          'delta' => array($delta),
          // Need to add Configuration to dashboard to modify this limit
          'limit' => $limit
        )),
        array(
          'type' => 'setting'
        ));

      return theme('sirsi_search',
        array(
          'query'=> $query,
          'delta'=> $delta,
          'sourceType' => $sourceType,
          'platform' => $platformType,
          'opacURL' => $opacURL
        ));
      break;

    //Perform EDS search with extracted query string and return the hf-searchbento-pub-search theme file.
    case 5:
      drupal_add_js(array(
        'hf_search_bento' => array(
          'query'=> $query,
          'platform' => array($platformType),
          'names' => array($sourceType),
          'delta' => array($delta),
          'limit'=> $limit
        )),
        array(
          'type' => 'setting'
        ));

      return theme('pub_search',
        array(
          'delta' => $delta,
          'sourceType' => $sourceType
        ));
      break;
  }
}

/**
 * Implements hook_theme()
 */
function hf_search_bento_theme(){
  return array(
    'eds_search' => array(
      'template' => 'plugins/templates/hf-searchbento-eds-search',
      'variables' => array()
    ),
    'solr_search' => array(
      'template' => 'plugins/templates/hf-searchbento-solr-search',
      'variables' => array()
    ),
    'polaris_search' => array(
      'template' => 'plugins/templates/hf-searchbento-polaris-search',
      'variables' => array()
    ),
    'sirsi_search' => array(
      'template' => 'plugins/templates/hf-searchbento-sirsi-search',
      'variables' => array()
    ),
    'pub_search' => array(
      'template' => 'plugins/templates/hf-searchbento-pub-search',
      'variables' => array()
    ),
  );
}

/**
 * Function called when the URI 'searchbento/eds' has been hit. Will call the EDS server to return results based on
 * GET parameters set by the AJAX call in the hf_search_bento.js file.
 *
 * @return JSON|int $data Either returns JSON results of returned records or 0 based on the the array count.
 */
function eds_ajax_call()
{
  $Document = null;
  $query = "";
  $sourceType = "";
  $platformType = "";
  $delta = "";
  $limit = "";
  //Get the query string generated by the AJAX call.
  if(isset($_GET['query'])) {
    //Translate unicode characters to proper punctuation characters. (Convert %20 to an actual comma character)
    $query = urldecode($_GET['query']);
  }
  //Get the source type (e.g., Academic Journals, Books, etc) generated by the AJAX call.
  if(isset($_GET['source'])) {
    //Translate unicode characters to proper punctuation characters. (Convert %20 to an actual comma character)
    $sourceType = urldecode($_GET['source']);
  }
  //Get the source type (e.g., Academic Journals, Books, etc) generated by the AJAX call.
  if(isset($_GET['platformType'])) {
    //Translate unicode characters to proper punctuation characters. (Convert %20 to an actual comma character)
    $platformType = urldecode($_GET['platformType']);
  }

  if(isset($_GET['delta'])) {
    //Translate unicode characters to proper punctuation characters. (Convert %20 to an actual comma character)
    $delta = urldecode($_GET['delta']);
  }

  if(isset($_GET['limit'])) {
    //Translate unicode characters to proper punctuation characters. (Convert %20 to an actual comma character)
    $limit = urldecode($_GET['limit']);
  }

  /**
   * Instantiates a new EDSDocument Object using the API library included in the Module Directory.
   * Constructor requires:
   *  - The query string ($query) under the key 'lookfor'.
   *  - Whether facets are returned (y|n); set to 'n' as Bento search doesn't require facets.
   *  - SourceType so that EDS can query specifically for results under that source type.
   */

  if($platformType == 2) {
    if($sourceType == "Everything") {
      $sourceType = 'Books,SourceType:eBooks,SourceType:Audio,SourceType:Videos,SourceType:Electronic Resources,SourceType:Magazines,SourceType:Reviews,SourceType:Reports,SourceType:News,SourceType:Conference Materials,SourceType:Non-Print Resources,SourceType:Dissertations,SourceType:Music Scores,SourceType:Primary Source Documents,SourceType:Biographies';
    }
    if ($sourceType == "Audio-Visual") {
      $sourceType = 'Audio,SourceType:Videos';
    }
    if ($sourceType == "Books & eBooks") {
      $sourceType = 'Books,SourceType:eBooks';
    }
    if ($sourceType == "Everything Else") {
      $sourceType = 'Electronic Resources,SourceType:Magazines,SourceType:Reviews,SourceType:Reports,SourceType:News,SourceType:Conference Materials,SourceType:Non-Print Resources,SourceType:Dissertations,SourceType:Music Scores,SourceType:Primary Source Documents,SourceType:Biographies';
    }

    $Document = new EBSCODocument(array('lookfor' => $query, 'includeFacet' => 'n', 'action' => $sourceType, 'limit' => $limit));
    //Calls the Search Method of the Document Object.
    $Document->search();
    //Place all returned search results into variable.
    $data['records'] = $Document->records();

    //Add result count
    $data['count'] = $Document->record_count();
    //Iterate through each record and strip unnecessary html tags that comes with the EDS response properties.
    foreach($data['records'] as $item) {
      // limit the number of authors to 3
      $author_string = strip_tags(preg_replace("/<br\W*?\/>/", "; ", $item->authors), "<a><sup><sub>");
      $author_string = explode( ";", $author_string);
      $author_string = array_slice( $author_string, 0, 3 );
      $author_string = implode( ";", $author_string );
      $item->authors = $author_string;

      $item->summary = strip_tags($item->summary);
    }
  } elseif($platformType == 3) {
    $pieces = explode("-", $delta);
    $catalogueURL = variable_get('stacks_search_polaris_catalogue_url');
    $Polaris = new PolarisAuthentication();
    $data = $Polaris->searchKeyWord(urlencode($query), 4321, $pieces[1], $limit);
    $data['url'] = $catalogueURL;
  } elseif($platformType == 5) {
    if($sourceType == "EDS - All Publications") {
      $sourceType = '';
    }

    $Document = new EBSCODocumentPub(array('lookfor' => $query, 'includeFacet' => 'n', 'action' => $sourceType, 'limit' => $limit, 'publication' => 'true'));
    //Calls the Search Method of the Document Object.

    $Document->search();

    //Place all returned search results into variable.
    $data['records'] = $Document->records();

    $token = variable_get('hf_stacks_search_eds_' . 'sessionToken');

    //Add result count
    $data['count'] = $Document->record_count();
    //Iterate through each record and strip unnecessary html tags that comes with the EDS response properties.
    foreach($data['records'] as $item) {
      $item->authors = strip_tags(preg_replace("/<br\W*?\/>/", "; ", $item->authors), "<a><sup><sub>");
      $item->summary = strip_tags($item->summary);
      $item->sid = $token;
    }
  } else {
    $opacURL = variable_get('stacks_search_sirsi_opac_url');
    $Sirsi = new SirsiAuthentication();
    $data = $Sirsi->searchKeyWord($query);
    $data['url'] = $opacURL;
  }

  //Determine what to return based on the query results.
  if(count($data) > 0) {
    return drupal_json_output($data);
  } else {
    return $data = 0;
  }
}

/**
 * Loads all necessary javascript and style sheet files.
 */
function _hf_load_script_files() {
  drupal_add_js(drupal_get_path('module', 'hf_search_bento') . '/js/hf_search_bento.js');
  drupal_add_css(drupal_get_path('module', 'hf_search_bento') . '/css/hf_search_bento.css');
}

