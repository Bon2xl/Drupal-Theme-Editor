<?php
/**
 * Implements hook_menu().
 */
function hf_tiles_menu() {

  $items = array();

  $items['admin/config/stacks/tiles'] = array(
    'title' => 'HF Stack Dashboard Tiles',
    'description' => 'Management of Dashboard Tiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hf_tiles_main_table_form'),
    'access arguments' => array('view stacks dashboard'),
  );

  $items['admin/config/stacks/tiles/add'] = array(
    'title' => 'HF Stack Dashboard Tiles',
    'description' => 'Creation of Dashboard Tiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hf_tiles_add_tile'),
    'access arguments' => array('view stacks dashboard'),
    'file' => 'hf_tiles.admin.inc',
  );

  $items['admin/config/stacks/tiles/edit/%'] = array(
    'title' => 'HF Stack Dashboard Edit Tile',
    'description' => 'Edit of Dashboard Tiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hf_tiles_edit_tile', 5),
    'access arguments' => array('view stacks dashboard'),
    'file' => 'hf_tiles.admin.inc',
  );

  $items['admin/config/stacks/tiles/delete/%'] = array(
    'title' => 'HF Stack Dashboard Delete Tile',
    'description' => 'Deleting of Dashboard Tiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hf_tiles_delete_tile', 5),
    'access arguments' => array('view stacks dashboard'),
    'file' => 'hf_tiles.admin.inc',
  );

  $items['admin/dashboard'] = array(
    'title' => 'HF Stack Dashboard Tiles',
    'description' => 'Management of Dashboard Tiles',
    'page callback' => 'hf_tiles_display_tiles',
    'access arguments' => array('view stacks dashboard'),
  );

  return $items;
}

/**
 * Implements hook_theme()
 */
function hf_tiles_theme() {
  return array(
    'dashboard' => array(
      'template' => 'templates/hf-tiles-dashboard',
      'variables' => array()
    ),
    'tile_main_table' => array(
      'render element' => 'element'
    ),
  );
}

/**
 * @page
 */
function hf_tiles_display_tiles() {
  //Query the database to create
  $tiles = hf_tiles_parent_get_data();

  return theme('dashboard', array('tiles' => $tiles));
}

/**
 * The main administrative form that displays all tile information.
 * @return mixed
 */
function hf_tiles_main_table_form() {

  //Retrieve all created tiles stored in database.
  //$tiles = _hf_tiles_query_tiles();
    $tiles = hf_tiles_parent_get_data();
//  $tiles = $tiles->fetchAll();

  $form['add-button'] = array(
    '#type' => 'button',
    '#value' => 'Add New Tile',
    '#executes_submit_callback' => TRUE,
    '#submit' => array('_hf_tiles_add_new_tile_redirect'),
  );

  $form['tile_main_table'] = array(
    '#prefix' => '<div id="curve-attributes">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'tile_main_table',
  );

  if(!empty($tiles)) {
    foreach($tiles as $tile) {
      $form['tile_main_table'][$tile->tile_id]['name'] = array(
        '#type' => 'item',
        '#markup' => $tile->name,
      );
      $form['tile_main_table'][$tile->tile_id]['description'] = array(
        '#type' => 'item',
        '#markup' => $tile->description,
      );
      $form['tile_main_table'][$tile->tile_id]['weight'] = array(
        '#type' => 'textfield',
        '#default_value' => $tile->weight,
        '#size' => 3,
      );

      $form['tile_main_table'][$tile->tile_id]['locked'] = array(
        '#type' => 'value',
        '#value' => $tile->locked,
      );

      $form['tile_main_table'][$tile->tile_id]['tile_id'] = array(
        '#type' => 'hidden',
        '#value' => $tile->tile_id,
      );

      $form['tile_main_table'][$tile->tile_id]['plid'] = array(
        '#type' => 'hidden',
        '#default_value' => $tile->plid,
      );

      $form['tile_main_table'][$tile->tile_id]['depth'] = array(
        '#type' => 'hidden',
        '#value' => $tile->depth,
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save Configuration',
    );

  }
  return $form;

}

/**
 * Implements hook_submit() for the main table form.
 * @param $form
 * @param $form_state
 */
function hf_tiles_main_table_form_submit($form, &$form_state) {

  try{
    foreach($form_state['values']['tile_main_table'] as $tile_id => $value) {
      db_update('stacks_tiles')
        ->fields(array(
          'weight' => $value['weight'],
          'plid' => $value['plid'],
        ))
        ->condition('tile_id', $tile_id)
        ->execute();
    }
  } catch(Exception $e) {
    //Display error message if something goes wrong.
    drupal_set_message(t('Unable to change the order of tiles at the moment, please try again later.'), 'error');
    watchdog('module', 'Error occurred while changing order of tiles. Message: !message', array('!message' => $e->getMessage()), WATCHDOG_ERROR);
  }
  //Display Success Message
  drupal_set_message('Tile configuration has been saved.');
}

/**
 * Themes the table form to be draggable based on weights.
 * @param $vars
 * @return string
 * @throws Exception
 */
function theme_tile_main_table($vars) {

  global $user;
  //drupal_add_tabledrag('admin_tile_table', 'order', 'sibling', 'item-row-weight');

  $element = $vars['element'];
  $header = array(
    'name' => t('Tile Name'),
    'description' => t('Description'),
    'operation' => t('Operation'),
    'weight' => t('Weight'),
  );
  
  $rows = array();

  if(!empty(element_children($element))) {
    foreach(element_children($element) as $key) {
      //Assign class to the weight column so that drupal tabledrag.js can pick it up
      $element[$key]['weight']['#attributes']['class'] = array('item-row-weight');
      $element[$key]['tile_id']['#attributes']['class'] = array('item-row-id');
      $element[$key]['plid']['#attributes']['class'] = array('item-row-pid');

      $indent = theme('indentation', array('size' => $element[$key]['depth']['#value']));
      unset($element[$key]['depth']);

      //Build the Table Row
      $row = array();
      $row[] = $indent . strip_tags(drupal_render($element[$key]['name']));
      $row[] = drupal_render($element[$key]['description']);
      //If it is locked, render edit/delete buttons based on if user is super admin or not.
      if(intval($element[$key]['locked']['#value']) === 1) {
        if($user->uid == 1) {
          $row[] = "<a href=\"" . base_path() . "admin/config/stacks/tiles/edit/" . $key . "\" class=\"btn-edit\">Edit</a>
                  <a href=\"" . base_path() . "admin/config/stacks/tiles/delete/" . $key . "\" class=\"btn-delete\">Delete</a>";
        } else {
          //Buttons are greyed out for users who are not super admins
          $row[] = "&nbsp;";
        }
      } else {
        $row[] = "<a href=\"" . base_path() . "admin/config/stacks/tiles/edit/" . $key . "\" class=\"btn-edit\">Edit</a>
              <a href=\"" . base_path() . "admin/config/stacks/tiles/delete/" . $key . "\" class=\"btn-delete\">Delete</a>";
      }
      $row[] = drupal_render($element[$key]['weight']);
      $row[] = drupal_render($element[$key]['tile_id']);
      $row[] = drupal_render($element[$key]['plid']);

      $rows[] = array(
        'data' => $row,
        'class' => array('draggable'));
    }
  } else {
    $row = array();
    $row[] = "No Tiles Available";
    $row[] = "";
    $row[] = "";
    $row[] = "";
    $rows[] = array('data' => $row);
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'admin_tile_table')));
  $output .= drupal_render_children($form);

  drupal_add_tabledrag('admin_tile_table', 'match', 'parent', 'item-row-pid', 'item-row-pid', 'item-row-id', FALSE, 1);
  drupal_add_tabledrag('admin_tile_table', 'order', 'sibling', 'item-row-weight', NULL, NULL, TRUE);
  return $output;
}

/**
 * Directs user to the add tile form.
 */
function _hf_tiles_add_new_tile_redirect() {
  drupal_goto('admin/config/stacks/tiles/add');
}

function hf_tiles_display_parent() {
  return db_query('SELECT st.tile_id, st.name, st.description, st.weight, st.plid, st.locked, st.path_url, st.help_url, st.tid, st.user_role, icon.field_icon_class_value
                    FROM {stacks_tiles} as st
                    LEFT JOIN {taxonomy_term_data} as ttd
                    ON st.tid = ttd.tid
                    LEFT JOIN {field_data_field_icon_class} as icon
                    ON ttd.tid = icon.entity_id
                    WHERE (plid = 0)
                    ORDER BY name ASC');
}

function hf_tiles_parent_get_data() {
  $rootnodes = hf_tiles_display_parent();
  $itemtree = array();
  $depth = -1;
  foreach($rootnodes as $parent) {
    hf_tiles_get_tree($parent, $itemtree, $depth);
  }
  return $itemtree;
}

function hf_tiles_get_tree($parentitem, &$itemtree = array(), &$depth = 0) {

  $depth++;
  $parentitem->depth = $depth;

  $itemtree[$parentitem->tile_id] = $parentitem;
  $children = db_query('SELECT st.tile_id, st.name, st.description, st.weight, st.plid, st.locked, st.path_url, st.help_url, st.tid, st.user_role, icon.field_icon_class_value
                        FROM {stacks_tiles} as st
                        LEFT JOIN {taxonomy_term_data} as ttd
                        ON st.tid = ttd.tid
                        LEFT JOIN {field_data_field_icon_class} as icon
                        ON ttd.tid = icon.entity_id
                        WHERE (plid = :plid)
                        ORDER BY name ASC',
    array(':plid'=> $parentitem->tile_id));

  foreach($children as $child){
    //if(!in_array($child->id, array_keys($itemtree))) {
      hf_tiles_get_tree($child, $itemtree, $depth);
    //}
  }
  $depth--;
 }

function hf_tiles_get_children($name) {
  $parent = db_query('SELECT tile_id
                      FROM {stacks_tiles}
                      WHERE (name = :name) ORDER BY weight ASC', array(':name' => ucfirst($name)));

  $parent = $parent->fetch();

  $children = db_query('SELECT st.tile_id, st.name, st.description, st.weight, st.plid, st.locked, st.path_url, st.help_url, st.tid, st.user_role, icon.field_icon_class_value
                        FROM {stacks_tiles} as st
                        LEFT JOIN {taxonomy_term_data} as ttd
                        ON st.tid = ttd.tid
                        LEFT JOIN {field_data_field_icon_class} as icon
                        ON ttd.tid = icon.entity_id
                        WHERE (plid = :plid)',
    array(':plid'=> $parent->tile_id));

  return $children;
}