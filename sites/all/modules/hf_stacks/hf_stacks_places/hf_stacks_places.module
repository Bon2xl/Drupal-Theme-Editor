<?php
/*
 * Stacks Places updates Drupal nodes based on a provided
 * Google Places API query.
 *
 * After selecting the content type to be used, it will place a manual update
 * button into the node edit form as well as update using Drupal's cron.
 *
 * The content type requires a text field called: field_google_places_query
 * This field will be used to store the query.
 *
 * The module will update the following fields in the system:
 *
 * Hours:
 * field_branch_sunday 							textfield
 * field_branch_monday 							textfield
 * field_branch_tuesday 						textfield
 * field_branch_wednesday						textfield
 * field_branch_thursday						textfield
 * field_branch_friday							textfield
 * field_branch_saturday						textfield
 *
 * Address:
 * field_branch_country							list
 * field_branch_state_province 			list
 * field_branch_city 								list
 * field_branch_postal_code_zip			textfield
 * field_branch_street_address			textfield
 *
 *
 * Geolocation:
 * field_branch_geocode 		geofield - using lat long fields
 *
 * Multiple fields are not supported.
 *
 */

/**
 * Implements hook_cron()
 */
function hf_stacks_places_cron() {
	$nids = db_select('node', 'n')
		->fields('n', array('nid'))
		->fields('n', array('type'))
		->condition('n.type', 'library_branch')
		->execute()
		->fetchCol(); // returns an indexed array
//	error_log(print_r($nids, true));
	foreach ($nids as $nid) {
		hf_stacks_places_sync_node($nid);
	}
}

/**
 * Implements hook_menu()
 *
 * @return array
 */
function hf_stacks_places_menu() {
	$items = array();
	$items['admin/config/stacks/places'] = array(
		'title' => 'Google Places',
		'description' => 'Configures Google Places integration.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('hf_stacks_places_config'),
		'access arguments' => array('access content'),
		'file' => 'hf_stacks_places.admin.inc'
	);
	return $items;
}


/**
 * Implements hoook_form_node_form_alter()
 *
 * @param $form
 * @param $form_state
 */
function hf_stacks_places_form_node_form_alter(&$form, $form_state) {
	
	$type = variable_get('hf_stacks_places_content_type');
	if($type == $form['type']['#value']) {
		$form["seperator"] = array(
			'#prefix' => '<p><hr /></p>',
		);
    $form["button"] = array(
      '#type' => 'button',
      '#value' => 'Sync Address from Google',
      '#weight' => 2,
      '#ajax' => array(
        'callback' => 'places_callback',
        'effect' => 'fade'),
			'#prefix' => '<div>',
			'#suffix' => '</div><p><hr /></p>'
		);
    $form["field_branch_country"]['#prefix'] = "<div id='field-branch-country'>";
    $form["field_branch_country"]['#suffix'] = "</div>";

		$form["field_branch_state_province"]['#prefix'] = "<div id='field-branch-province'>";
		$form["field_branch_state_province"]['#suffix'] = "</div>";

		$form["field_branch_city"]['#prefix'] = "<div id='field-branch-city'>";
		$form["field_branch_city"]['#suffix'] = "</div>";

		$form["field_branch_postal_code_zip"]['#prefix'] = "<div id='field-branch-postal-code-zip'>";
		$form["field_branch_postal_code_zip"]['#suffix'] = "</div>";

		$form["field_branch_street_address"]['#prefix'] = "<div id='field-branch-street-address'>";
		$form["field_branch_street_address"]['#suffix'] = "</div>";

		$form["field_branch_geocode"]['#prefix'] = "<div id='field-branch-geocode'>";
		$form["field_branch_geocode"]['#suffix'] = "</div>";

		$form["field_branch_sunday"]['#prefix'] = "<div id='field-branch-sunday'>";
		$form["field_branch_sunday"]['#suffix'] = "</div>";

		$form["field_branch_monday"]['#prefix'] = "<div id='field-branch-monday'>";
		$form["field_branch_monday"]['#suffix'] = "</div>";

		$form["field_branch_tuesday"]['#prefix'] = "<div id='field-branch-tuesday'>";
		$form["field_branch_tuesday"]['#suffix'] = "</div>";

		$form["field_branch_wednesday"]['#prefix'] = "<div id='field-branch-wednesday'>";
		$form["field_branch_wednesday"]['#suffix'] = "</div>";

		$form["field_branch_thursday"]['#prefix'] = "<div id='field-branch-thursday'>";
		$form["field_branch_thursday"]['#suffix'] = "</div>";

		$form["field_branch_friday"]['#prefix'] = "<div id='field-branch-friday'>";
		$form["field_branch_friday"]['#suffix'] = "</div>";

		$form["field_branch_saturday"]['#prefix'] = "<div id='field-branch-saturday'>";
		$form["field_branch_saturday"]['#suffix'] = "</div>";
	}
}

function places_callback($form, &$form_state) {
  $query = $form_state['values']['field_google_places_query'][LANGUAGE_NONE][0]['value'];
  if ($query) {
    $place = hf_stacks_places_place_details($query);

		$form['field_branch_sunday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_monday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_tuesday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_wednesday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_thursday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_friday'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_saturday'][LANGUAGE_NONE][0]['value']['#value'] = '';

		$form['field_branch_country'][LANGUAGE_NONE]['#value'] = '';
		$form['field_branch_state_province'][LANGUAGE_NONE]['#value'] = '';
		$form['field_branch_city'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_postal_code_zip'][LANGUAGE_NONE][0]['value']['#value'] = '';
		$form['field_branch_street_address'][LANGUAGE_NONE][0]['value']['#value'] = '';

    if (isset($place->result->opening_hours) && $place->result->opening_hours->periods) {
      // hours are in. we will assume the  day starts on Sunday.
      // we will loop through the object and parse hours.
      // first, we set all the hours as closed.

      $form['field_branch_sunday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_monday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_tuesday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_wednesday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_thursday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_friday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';
      $form['field_branch_saturday'][LANGUAGE_NONE][0]['value']['#value'] = 'Closed';

      foreach($place->result->opening_hours->periods as $period) {
        switch ($period->open->day) {
          case 0: // sunday
						//dpm('test');
            $form['field_branch_sunday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 1: // monday
            $form['field_branch_monday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 2: // tuesday
            $form['field_branch_tuesday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 3: // wednesday
            $form['field_branch_wednesday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 4: // thursday
            $form['field_branch_thursday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 5: // friday
            $form['field_branch_friday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
          case 6: // wednesday
            $form['field_branch_saturday'][LANGUAGE_NONE][0]['value']['#value'] = _hf_stacks_places_period_to_hours($period);
            break;
        }
      }
    }

    // now we need to find out the address.
    if (isset($place->result->address_components)) {
      foreach ($place->result->address_components as $component) {
        if (in_array('country', $component->types)) {
          $form['field_branch_country'][LANGUAGE_NONE]['#value'] = $component->short_name;
        }

        if (in_array('administrative_area_level_1', $component->types)) {
          $form['field_branch_state_province'][LANGUAGE_NONE]['#value'] = $component->short_name;
        }

        if (in_array('locality', $component->types)) {
          $form['field_branch_city'][LANGUAGE_NONE][0]['value']['#value'] = $component->short_name;
        }

        if (in_array('postal_code', $component->types)) {
          $form['field_branch_postal_code_zip'][LANGUAGE_NONE][0]['value']['#value'] = $component->short_name;
        }

      }
    }

    if (isset($place->result->formatted_address)) {
      // we will take the street address from the formatted one.
      $parts = explode(',', $place->result->formatted_address);
      $form['field_branch_street_address'][LANGUAGE_NONE][0]['value']['#value'] = $parts[0];
    }

    if (isset($place->result->geometry)) {
			$form['field_branch_geocode'][LANGUAGE_NONE][0]['geom']['#value'] = 'POINT ('.$place->result->geometry->location->lng.' '.$place->result->geometry->location->lat.')';
    }
  }

  // -----------------------------------

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('#field-branch-country', render($form['field_branch_country'])),
      ajax_command_replace('#field-branch-province', render($form['field_branch_state_province'])),
      ajax_command_replace('#field-branch-city', render($form['field_branch_city'])),
      ajax_command_replace('#field-branch-street-address', render($form['field_branch_street_address'])),
      ajax_command_replace('#field-branch-postal-code-zip', render($form['field_branch_postal_code_zip'])),
			ajax_command_replace('#field-branch-geocode', render($form['field_branch_geocode'])),
			ajax_command_replace('#field-branch-sunday', render($form['field_branch_sunday'])),
			ajax_command_replace('#field-branch-monday', render($form['field_branch_monday'])),
			ajax_command_replace('#field-branch-tuesday', render($form['field_branch_tuesday'])),
			ajax_command_replace('#field-branch-wednesday', render($form['field_branch_wednesday'])),
			ajax_command_replace('#field-branch-thursday', render($form['field_branch_thursday'])),
			ajax_command_replace('#field-branch-friday', render($form['field_branch_friday'])),
			ajax_command_replace('#field-branch-saturday', render($form['field_branch_saturday'])),
    )
  );
}

drupal_add_css(
  '.form-item-sync {display:inline;}',
  array(
    'group' => CSS_THEME,
    'type' => 'inline',
    'media' => 'screen',
    'preprocess' => FALSE,
    'weight' => '9999',
  )
);

/**
 * here's where magic happens. it will find the place in Google
 * and populate a set of Drupal fields based on the information
 * coming from the API.
 *
 */
function hf_stacks_places_update_node($form, $form_state) {
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	$query = $form_state['input']['field_google_places_query'][LANGUAGE_NONE][0]['value'];
  // print_r($node); exit;
	$node->field_google_places_query[LANGUAGE_NONE][0]['value'] = $query;
	node_save($node);
	hf_stacks_places_sync_node($nid);
}


function hf_stacks_places_node_presave($node) {
	if (isset($node->sync)) {
		if ($node->sync == '0') {
			$query = $node->field_google_places_query[LANGUAGE_NONE][0]['value'];
			if ($query) {
				//dpm('test');
				drupal_set_message('Node updated based on Google Places listing');
				$place = hf_stacks_places_place_details($query);
				drupal_set_message($place->result->formatted_address);

				//watchdog('places','places',$place->result);

				if (isset($place->result->opening_hours) && $place->result->opening_hours->periods) {
					// hours are in. we will assume the  day starts on Sunday.
					// we will loop through the object and parse hours.
					// first, we set all the hours as closed.
					$node->field_branch_sunday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_monday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_tuesday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_wednesday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_thursday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_friday[LANGUAGE_NONE][0]['value'] = 'Closed';
					$node->field_branch_saturday[LANGUAGE_NONE][0]['value'] = 'Closed';

					foreach($place->result->opening_hours->periods as $period) {
						switch ($period->open->day) {
							case 0: // sunday
								$node->field_branch_sunday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 1: // monday
								$node->field_branch_monday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 2: // tuesday
								$node->field_branch_tuesday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 3: // wednesday
								$node->field_branch_wednesday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 4: // thursday
								$node->field_branch_thursday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 5: // friday
								$node->field_branch_friday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
							case 6: // wednesday
								$node->field_branch_saturday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
								break;
						}
					}
				}

				// now we need to find out the address.
				if (isset($place->result->address_components)) {
					foreach ($place->result->address_components as $component) {
						if (in_array('country', $component->types)) {
							$node->field_branch_country[LANGUAGE_NONE][0]['value'] = $component->short_name;
						}

						if (in_array('administrative_area_level_1', $component->types)) {
							$node->field_branch_state_province[LANGUAGE_NONE][0]['value'] = $component->short_name;
						}

						if (in_array('locality', $component->types)) {
							$node->field_branch_city[LANGUAGE_NONE][0]['value'] = $component->short_name;
						}

						if (in_array('postal_code', $component->types)) {
							$node->field_branch_postal_code_zip[LANGUAGE_NONE][0]['value'] = $component->short_name;
						}

					}
				}

				if (isset($place->result->formatted_address)) {
					// we will take the street address from the formatted one.
					$parts = explode(',', $place->result->formatted_address);
					$node->field_branch_street_address[LANGUAGE_NONE][0]['value'] = $parts[0];
				}

				if (isset($place->result->geometry)) {
					//$new_value = array ('input_format' => GEOFIELD_INPUT_LAT_LON, 'geom' => array ( 'lat' => $place->result->geometry->location->lat, 'lon' => $place->result->geometry->location->lng));
					//$node->field_branch_geocode[LANGUAGE_NONE][0] = $new_value;

					$node->field_branch_geocode[LANGUAGE_NONE][0]['input_format'] = 'GEOFIELD_INPUT_LAT_LON';
					//$node->field_branch_geocode[LANGUAGE_NONE][0]['input_type'] = 'poing';
					$node->field_branch_geocode[LANGUAGE_NONE][0]['lat'] = $place->result->geometry->location->lat;
					$node->field_branch_geocode[LANGUAGE_NONE][0]['lon'] = $place->result->geometry->location->lng;
				}
			}
		}
	}
}


/**
 * Syncs an individual node based on the configuration.
 *
 * @param $nid
 */
function hf_stacks_places_sync_node($nid) {
	$node = node_load($nid);
	// now we just update the node based on the query.
	if (isset($node->field_google_places_query[LANGUAGE_NONE][0]['value'])) {
		$query = $node->field_google_places_query[LANGUAGE_NONE][0]['value'];
		drupal_set_message('Node updated based on Google Places listing');
		$place = hf_stacks_places_place_details($query);
		drupal_set_message($place->result->formatted_address);

		if (isset($place->result->opening_hours) && $place->result->opening_hours->periods) {

			// hours are in. we will assume the  day starts on Sunday.
			// we will loop through the object and parse hours.
			// first, we set all the hours as closed.
			$node->field_branch_sunday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_monday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_tuesday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_wednesday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_thursday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_friday[LANGUAGE_NONE][0]['value'] = 'Closed';
			$node->field_branch_saturday[LANGUAGE_NONE][0]['value'] = 'Closed';

			foreach($place->result->opening_hours->periods as $period) {
				switch ($period->open->day) {
					case 0: // sunday
						$node->field_branch_sunday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 1: // monday
						$node->field_branch_monday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 2: // tuesday
						$node->field_branch_tuesday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 3: // wednesday
						$node->field_branch_wednesday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 4: // thursday
						$node->field_branch_thursday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 5: // friday
						$node->field_branch_friday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
					case 6: // wednesday
						$node->field_branch_saturday[LANGUAGE_NONE][0]['value'] = _hf_stacks_places_period_to_hours($period);
						break;
				}
			}
		}

		// now we need to find out the address.
		if (isset($place->result->address_components)) {
			foreach ($place->result->address_components as $component) {
				if (in_array('country', $component->types)) {
					$node->field_branch_country[LANGUAGE_NONE][0]['value'] = $component->short_name;
				}

				if (in_array('administrative_area_level_1', $component->types)) {
					$node->field_branch_state_province[LANGUAGE_NONE][0]['value'] = $component->short_name;
				}

				if (in_array('locality', $component->types)) {
					$node->field_branch_city[LANGUAGE_NONE][0]['value'] = $component->short_name;
				}

				if (in_array('postal_code', $component->types)) {
					$node->field_branch_postal_code_zip[LANGUAGE_NONE][0]['value'] = $component->short_name;
				}

			}
		}

		if (isset($place->result->formatted_address)) {
			// we will take the street address from the formatted one.
			$parts = explode(',', $place->result->formatted_address);
			$node->field_branch_street_address[LANGUAGE_NONE][0]['value'] = $parts[0];
		}

		if (isset($place->result->geometry)) {
			$new_value = array ('input_format' => GEOFIELD_INPUT_LAT_LON, 'geom' => array ( 'lat' => $place->result->geometry->location->lat, 'lon' => $place->result->geometry->location->lng));
			$node->field_branch_geocode[LANGUAGE_NONE][0] = $new_value;
		}
	}

	node_save($node);
//	drupal_goto('node/'.$node->nid);
}


/**
 * Makes a Google Places API text search based on the string provided.
 *
 * @param $query
 * @param $key
 * @return mixed
 */
function hf_stacks_places_search($query, $key) {
	$query = str_replace(' ', '+', $query);
	$url = "https://maps.googleapis.com/maps/api/place/textsearch/json?key=".$key."&query=".$query."&userIp=127.0.0.1";
	return json_decode(_hf_stacks_places_request($url));
}

/**
 * Gets the listing details based on the placeid required
 * by Google Places API.
 *
 * @param $place_id
 * @param $key
 * @return mixed
 */
function hf_stacks_places_details($place_id, $key) {
	$url = "https://maps.googleapis.com/maps/api/place/details/json?key=".$key."&placeid=".$place_id."&userIp=127.0.0.1";
	return json_decode(_hf_stacks_places_request($url));
}


/**
 * Takes a location query and returns the details of the first
 * location found.
 *
 * @param $query
 * @return array
 */
function hf_stacks_places_place_details($query) {
	$key = variable_get('hf_stacks_places_api_key', '');
	if (empty($key)) {
		drupal_set_message('You must configure HF Stacks Places before querying.', 'error');
		return array();
	}
	$places = hf_stacks_places_search($query, $key);
	
	if (isset($places->results[0])) {
		$place_id = $places->results[0]->place_id;
		$place = hf_stacks_places_details($place_id, $key);
		
		return $place;
	} else {
		drupal_set_message('No locations found for node using:' . $query, 'error');
		return array();
	}
}

/**
 * Makes a request to Google Places API
 *
 * @param $url
 * @return mixed
 */
function _hf_stacks_places_request($url) {
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
//	curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	$output = curl_exec($ch);
	curl_close($ch);
	return $output;
}

function _hf_stacks_places_period_to_hours($period) {
//	preg_replace('/^.*(\d{2})(\d{2})(\d{2})$/', '$1:$2:$3', $string);
	return preg_replace('/^.*(\d{2})(\d{2})$/', '$1:$2', $period->open->time) . ' - ' . preg_replace('/^.*(\d{2})(\d{2})$/', '$1:$2', $period->close->time);
}

function _hf_stacks_places_mapblock($data) {
  $api_key = variable_get('hf_stacks_maps_api_key', '');
  $output = '';

  if (!empty($api_key)) {
    if (!empty($data)) {
      $nid = $data->nid;
      $title = $data->node_title;
			if (isset($data->field_field_branch_geocode[0]) && isset($data->field_field_branch_geocode_1[0])) {
				$lat = $data->field_field_branch_geocode[0]['rendered']['#markup'];
				$long = $data->field_field_branch_geocode_1[0]['rendered']['#markup'];
			} else {
				$lat = '';
				$long = '';
			}
      if (!empty($lat) && !empty($long)) {
      	$output .= '<div class="gmap_data" data-map=\'{"lat":"'.$lat.'", "long":"'.$long.'", "title":"'.$title.'", "id":"'.$nid.'"}\'></div>';
      }
    }
  }

  print $output;
}
