<?php

function hf_similartitles_init() {
  drupal_add_js(drupal_get_path('module', 'hf_similartitles') . '/js/hf_similartitles.js');
}

/*
 *   Implements hook_help().
 */
function hf_similartitles_help($path, $arg) {
	switch($path) {
		case 'admin/help#hf_similartitles':{
			$ret_val = '<h3>' . t('About') . '</h3>';
			$ret_val .= '<p>' . t('Retrieves similar titles for a book') . '</p>';
			return $ret_val;
			break;
		}
	}
}

/*
 *  Implements hook_permissions().
 */
function hf_similartitles_permission(){
	return array(
		'administer similar titles' => array(
			'title'         => t('Administer Similar Titles'),
			'description'   => t('Preform administrative functions on similar titles.'),
		),
	);
}

/*
 * Impelments hook_menu()
 */
function hf_similartitles_menu(){
	$items = array();

		//Admin configuration - Settings
		$items['admin/config/stacks/similartitles'] = array(
			'title'             => 'Similar titles',
			'description'       => 'Manage similar titles',
			'access arguments'  => array('administer similar titles'),
			'page callback'     => 'drupal_get_form',
			'page arguments'    => array('hf_similartitles_admin_settings_form'),
		);

	return $items;
}

/*
 *  Implements hook_form().
 */
function hf_similartitles_admin_settings_form($node, &$form_state){
	$form = array();

	$form['overview'] = array(
		'#markup' => t('Administer Similar Titles'),
		'#prefix' => '<H2>',
		'#suffix' => '</H2>',
	);

	/*
	 * Novelist reviews api keys
	 */
	$form['novelist'] = array(
		'#title' => t('Novelist API'),
		'#description' => t('Dynamically populates ‘Similar Titles’ in individual search results - detail views'),
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed'=> FALSE
	);

	$form['novelist']['hf_similartitles_novelist_userid'] = array(
		'#title'            => t('Novelist User ID'),
		'#description'      => t('When filled out, the system will use Novelist Select to find similar titles.'),
		'#type'             => 'textfield',
		'#default_value'    => variable_get('hf_similartitles_novelist_userid', ''),
	);

	$form['novelist']['hf_similartitles_novelist_password'] = array(
		'#title'            => t('Novelist Password'),
		'#description'      => t('The password is needed for making requests to the server. (Passwords saved in the database are not shown here)'),
		'#type'             => 'textfield',
		'#default_value'    => variable_get('hf_similartitles_novelist_password', ''),
	);

  /*
  if (!empty(variable_get('hf_similartitles_novelist_password', ''))) {
    $form['novelist']['hf_similartitles_novelist_password']['#attributes'] = array('placeholder' => '····················');
  }
  */

	$form['submit'] = array(
		'#type'     => 'submit',
		'#value'    => 'Submit',
	);
	return $form;
}


/*
 * Submit the form
 */
function hf_similartitles_admin_settings_form_submit($form, &$form_state){
	//Rebuild the form.
	$form_state['rebuild'] = TRUE;

	//Save Novelest select vars.
	variable_set('hf_similartitles_novelist_userid', $form_state['values']['hf_similartitles_novelist_userid']);
  if (!empty($form_state['values']['hf_similartitles_novelist_password'])) {
    variable_set('hf_similartitles_novelist_password', $form_state['values']['hf_similartitles_novelist_password']);
  }

	drupal_set_message('Stacks similar titles values saved.');
}


/*
 * Implements hook_block_info().
 */
function hf_similartitles_block_info(){
	$blocks = array();
	$blocks['similartitles'] = array(
		'info' => t('HF Similar Titles'),
	);
	return $blocks;
}


/*
 * Implements hook_block_view().
 */
function hf_similartitles_block_view($delta = ''){
	$block = array();
	$mPath = drupal_get_path('theme', 'hfstacks');
	$similarString = '';

	global $base_url;

	switch($delta) {
		case 'similartitles': {
			// $fetch_JSON = _getSimilarTitles('9781419703782');
			// dpm(_getSimilarTitles($_GET['isbn']));
			if (isset($_GET['isbn'])) {
				$fetch_JSON = _getSimilarTitles($_GET['isbn']);
				if (!empty($fetch_JSON)) {
					$similarString .= '<div class="similar-titles">';
					$similarString .= '<h2>Similar Titles</h2>';
					$similarString .= '<div id="book_similar-titles" class="book_similar-titles">';
					foreach ($fetch_JSON as $similar) {
						//dpm($review);
						$similarString .= '<div class="st-row">';
						$similarString .= '<div class="img-cover">';
						$similarString .= '<a href="'.$base_url.'/eds/lookup?query='.$similar['isbn'].'">';
						if ($similar['coverSmall']) {
							$similarString .= '<img src="'.$similar['coverSmall'].'" />';
						} else {

							$similarString .= '<img src="/'.$mPath.'/assets/img/book.png" />';
						}
						$similarString .= '</a>';
						$similarString .= '</div>';
						$similarString .= '<p><strong><a href="'.$base_url.'/eds/lookup?query='.$similar['isbn'].'">'.$similar['title'].'</a></strong></p>';
						$similarString .= '<p>[<a href="'.$base_url.'/eds/?query='.$similar['author'].'">'.$similar['author'].'</a>]</p>';
						$similarString .= '</div>';
					}
					$similarString .= '</div>';
					$similarString .= '</div>';

					$block['content'] = $similarString;
					//$block['similartitles'] = $similarString;
				}
			}
			break;
		}
	}
	return $block;
}


function hf_similartitles_theme($existing, $type, $theme, $path) {
	return array(
		'similartitles' => array(
			'variables' => array(),
			'template'  => 'similartitles',
			'path'      => drupal_get_path('module', 'hf_similartitles'),
		),
	);
}


/*
 * API call to fetch similar titles
 *
 */
function _getSimilarTitles($isbn)
{
	$Reviews = array();
	$Count = 0;

	if(variable_get('hf_similartitles_novelist_userid')) {
		//$requesturl = file_get_contents('http://contentcafe2.btol.com/ContentCafe/ContentCafe.asmx/Single?userID='. variable_get('hf_similartitles_userid') .'&password='. variable_get('hf_similartitles_password') .'&content=ReviewDetail&key='.$isbn);
		$requesturl = file_get_contents('http://eit.ebscohost.com/Services/NovelistSelect.asmx/SimilarTitles?prof=' . variable_get('hf_similartitles_novelist_userid') . '&pwd=' . variable_get('hf_similartitles_novelist_password') . '&authType=&ipprof=&isbn='.$isbn);

		if (!empty($requesturl)) {
			$request = new SimpleXMLElement($requesturl);
      /*
      print "<pre>";
      print_r($request);
      print "</pre>";
      */

			$looper = $request->Features->FeatureGroup->Feature->Item;

			foreach ($looper as $obj) {
        $Reviews[$Count]['isbn'] = (string)$obj->TitleList->TitleItem[0]['value'];
				$Reviews[$Count]['title'] = (string)$obj->Name;
				$Reviews[$Count]['content'] = (string)$obj->WhySuggested['reason'];
				$Reviews[$Count]['author'] = (string)$obj->Author;
				$Reviews[$Count]['coverSmall'] = (string)$obj->Images->Image[0]['url'];
				$Reviews[$Count]['coverMed'] = (string)$obj->Images->Image[1]['url'];
				$Count++;
			}
		}
	}

	return $Reviews;
}