<?php
/**
 * HF Stacks Solr Search Module
 *
 * Replaces the core drupal search module by utilizing the search api module
 * solr functionality to retrieve results from within Stacks.
 */

/**
 * Implements hook_menu()
 */
function hf_stacks_search_solr_menu() {
  $items = array();
  $items['solr'] = array(
    'title' => t('Search'),
    'page callback' => 'hf_stacks_search_solr_main',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme()
 */
function hf_stacks_search_solr_theme(){
  return array(
    'search_page' => array(
      'template' => 'templates/hf_stacks_search_solr',
      'variables' => array()
    ),
  );
}

/**
 * Returns results to tpl file.
 * @page
 * @return string
 * @throws Exception
 */
function hf_stacks_search_solr_main() {
  drupal_add_css(drupal_get_path('module', 'hf_stacks_search_solr') . '/css/hf_stacks_search_solr.css');
  $results = array();
  //Retrieve all query parameters from the URL.
  $params = drupal_get_query_parameters();

  //Extract query from query string "bentoq"
  $query = $params['bentoq'];

  if(!empty($query)) {
    $results = _hf_solr_search($query, 'stacks', true);
    if (count($results) > 1) {
      $count = array_pop($results);
      //Utility Function that splices the array to be used by pager theme.
      $results = pager_array_splice($results, 10);
    } else {
      $results = array_pop($results);
    }
  }

  //Find Facets if available.
  $index = _load_solr_indexes('stacks');
  $delta = facetapi_hash_delta(facetapi_build_delta('search_api@' . $index, 'block', 'type'));
  $facetBlock = module_invoke('facetapi', 'block_view', $delta);

  $output = theme('search_page', array('results' => $results, 'count' => $count, 'query' => $query, 'facetBlock' => $facetBlock));
  //Pages the results
  $output .= theme('pager', array('quantity' => 10));
  return $output;
}

/**
 * A generic array pager for Drupal.
 * For Drupal 5 and 6, the default limit is 10. For Drupal 7 it is 9.
 * @param $data     array   The result set to be parsed.
 * @param $limit    int     The limit per page
 * @param $element  int     The offset
 * @return array    Result set parsed to be used by theme('pager')
 */
function pager_array_splice($data, $limit = 9, $element = 0) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}

/**
 * Queries SOLR based on the passed query string.
 *
 * @param     $query  string      The query to be searched for in SOLR.
 * @param     $field  string      The content-type to search for search index's machine_name. Make sure it matches in the database.
 * @return    array               The results returned by SOLR.
 * @throws    SearchApiException  Exception thrown by SearchAPI
 */
function _hf_solr_search($query, $field = 'stacks', $main = false, $limit = null) {
  //Intialize empty result array that will be added to when solr results are returned.
  $result = array();

  //Retrieve configured SOLR index under bento box setting under dashboard integrations -> Search.
  //$machine_name = variable_get('stacks_search_bento_solr');
  $indexName = _load_solr_indexes($field);
  //Instantiate SearchApiIndex Object
  try{
    $searchindex = search_api_index_load($indexName);

    //Query SOLR; empty array is empty and is Search_API_Pages specific (not needed)
    // - Keys is query string
    // - Range is offset and limit.
    $query = search_api_query($indexName, array())
      ->keys($query);
    if(isset($limit)) {
      $query->range(0, $limit);
    }
    $results = $query->execute();
    /*
 * Parsing of Returned Results set. Borrowed and modified from Search Api Pages module to suit
 * Bento Box module needs.
 */

    //Get the individual ids of each returned results to be parsed later
    //Calls the loadItems method of the SearchApiIndex Object.
    if(!empty($results['results'])) {
      $items = $searchindex->loadItems(array_keys($results['results']));
    }
    foreach($items as $key => $item) {
      $wrapper = $searchindex->entityWrapper($item, FALSE);

      $result[$key]['url'] = $searchindex->datasource()->getItemUrl($item);
      $result[$key]['title'] = $searchindex->datasource()->getItemLabel($item);

      //Grab the excerpt generated by Solr
      if (!empty($results['results'][$key]['excerpt'])) {
        //$variables['excerpt'] = $variables['result']['excerpt'];
        $text = $results['results'][$key]['excerpt'];
      }
      else {
        //Get the text from the item
        $fields = $searchindex->options['fields'];
        $fields = array_intersect_key($fields, drupal_map_assoc($searchindex->getFulltextFields()));
        $fields = search_api_extract_fields($wrapper, $fields);

        $text = '';
        $length = 0;

        //This foreach is borrowed from Search_Api_Pages modules
        foreach($fields as $field_name => $field) {
          if (search_api_is_list_type($field['type']) || !isset($field['value'])) {
            continue;
          }
          $val_length = drupal_strlen($field['value']);
          if ($val_length > $length) {
            $text = $field['value'];
            $length = $val_length;

            $format = NULL;
            if (($pos = strrpos($field_name, ':')) && substr($field_name, $pos + 1) == 'value') {
              $tmp = $wrapper;
              try {
                foreach (explode(':', substr($field_name, 0, $pos)) as $part) {
                  if (!isset($tmp->$part)) {
                    $tmp = NULL;
                  }
                  $tmp = $tmp->$part;
                }
              }
              catch (EntityMetadataWrapperException $e) {
                $tmp = NULL;
              }
              if ($tmp && $tmp->type() == 'text_formatted' && isset($tmp->format)) {
                $format = $tmp->format->value();
              }
            }
          }
        }
        if ($text && function_exists('text_summary')) {
          $text = text_summary($text, $format);
        }
      }
      $result[$key]['type'] = node_type_get_name($item->type);
      $result[$key]['realType'] = $item->type;
      $result[$key]['snippet'] = isset($text) ? $text : '';
    }
    $result['resultCount'] = $results['result count'];
    //Reset index back to 0
    return array_values($result);
  } catch(Exception $e) {
    watchdog('hf_search_bento', 'SOLR Exception has occurred: %e', array('%e' => $e), WATCHDOG_ERROR);
  }

}

/**
 * Helper function to retrieve the machine_name of a passed in solar index.
 * Useful because platform uses different machine_names than the local development environment.
 *
 * @param $name            string   The name of the desired index.
 * @return $machine_name   string   The machine_name of the index.
 */
function _load_solr_indexes($name) {
  $query = db_select('search_api_index', 's');
  $query->fields('s', array('machine_name'));
  $query->condition('name', $name, '=');
  $index = $query->execute()->fetchCol();

  return $index[0];
}