<?php

require_once('./' . drupal_get_path('module', 'hf_eds') . '/api/hf_eds_auth.class.inc');
require_once('./' . drupal_get_path('module', 'hf_eds') . '/api/hf_eds_search.class.inc');
require_once('./' . drupal_get_path('module', 'hf_eds') . '/includes/lib_autolink.inc');

/**
 * Implements hook_menu()
 */
function hf_eds_menu() {
	$items = array();
	$items['eds'] = array(
		'title' => '',
		'page callback' => 'hf_eds_page',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['eds/detail'] = array(
		'title' => '',
		'page callback' => 'hf_eds_detail',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['eds/saved-items'] = array(
		'title' => '',
		'page callback' => 'hf_eds_saved',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['eds/savelist'] = array(
		'title' => '',
		'page callback' => 'hf_eds_savelist',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
  $items['eds/savelist/add'] = array(
    'page callback' => 'hf_eds_savelist_add',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output'
  );
  $items['eds/savelist/delete'] = array(
    'page callback' => 'hf_eds_savelist_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output'
  );
	$items['eds/saved-items/ajax-content'] = array(
		'page callback' => 'hf_eds_saved_ajax',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
		'delivery callback' => 'drupal_json_output'
	);
	$items['eds/lookup'] = array(
		'title' => '',
		'page callback' => 'hf_eds_lookup',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
  $items['eds/savesearch'] = array(
    'title' => '',
    'page callback' => 'hf_eds_savesearch',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
	$items['eds/savesearch/add'] = array(
		'page callback' => 'hf_eds_savesearch_add',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
		'delivery callback' => 'drupal_json_output'
	);
	$items['eds/savesearch/delete'] = array(
		'page callback' => 'hf_eds_savesearch_delete',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
		'delivery callback' => 'drupal_json_output'
	);
	// admin settings
	$items['admin/config/stacks/eds'] = array(
		'title' => 'Search Settings',
		'description' => 'Selects and configure Search settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('_hf_eds_form'),
		'access arguments' => array('administer stacks config'),
		'file' => 'hf_eds.admin.inc',
	);
	return $items;
}

/**
 * Implements hook_theme()
 */
function hf_eds_theme(){
	return array(
		'eds_page' => array(
			'template' => 'templates/hf-eds',
			'variables' => array()
		),
		'eds_detail' => array(
			'template' => 'templates/hf-eds-detail',
			'variables' => array()
		),
		'eds_saved' => array(
			'template' => 'templates/hf-saved',
			'variables' => array()
		),
		'eds_savelist' => array(
			'template' => 'templates/hf-savelist',
			'variables' => array()
		),
    'eds_savesearch' => array(
      'template' => 'templates/hf-savesearch',
      'variables' => array()
    ),
		'eds_error' => array(
			'template' => 'templates/hf-eds-error',
			'variables' => array()
		)
	);
}

/**
 * @page search
 *  This function builds the content for the search page.
 */
function hf_eds_page() {
	$connector = new EDSConnector();
  $connector->authorizer();

  if ($connector->authorizer() != 'error') {
    //Get the url paramters and convert them into a filter list. 2 lines of code for debugging
    $url_args = drupal_get_query_parameters();
    $filters = _hf_eds_search_url_to_filters($url_args);

    //Search was just initiated
    if(!empty($filters['query'])){
      $search = _hf_eds_search_object("new", $filters);
      $facets = $search->facets;
      return theme('eds_page', array('vars' => $search, 'facets' => $facets));
    } else {
      return theme('eds_page', array('vars' => ''));
    }
  } else {
    return theme('eds_error', array('vars' => ''));
  }
}

function hf_eds_detail() {
	$connector = new EDSConnector();

	// get search results
	$results = $connector->requestRetrieve();

	// Error
	if (isset($results['error'])) {
		$error = $results['error'];
		$results =  array();
	} else {
		$error = null;
	}

	return theme('eds_detail', array('vars' => $results));
}

function hf_eds_saved(){
	$url = _hf_eds_search_object("url");
	global $base_url;
	$return_string = '<div class="page-library-search bg-wrapper">';
		$return_string .= '<a class="back-to-search" href="' . $base_url . "/eds"  . $url . '">&#10094; Back to Search</a>';
		$img_url = $base_url . '/sites/all/modules/hf_eds/images/loading.gif';
		$return_string .= '<div id="saved-items" class="views-module saved-views">Loading saved items <img src="' . $img_url  . '"/></div>';
	$return_string .= '</div>';
	return $return_string;
}

/**
 * @page ajax-content
 * This page is called via AJAX from the saved-items page via the javascript.
 * This function then takes the posted elements and retrieves the items and
 * build the html for each one.
 */
function hf_eds_saved_ajax(){
	$elements = $_POST['elements'];
	$connector = new EDSConnector();
	$connector->authorizer();
	$search = new EDSSearch();
	$return_string = "";

	foreach($elements as $element){
		$element = explode('-', $element);
		// $element[0] = accession number (an)
		// $element[1] = database id

		$e = $search->retrieve($element[0], $element[1]);

		//var_dump($e);

		$params = array(
			'db'=>$e['DbId'],
			'an'=>$e['An']
		);
		$params = http_build_query($params);

		$return_string .= "<div id=\"" . $element[0] . "-" . $element[1] ."\" class='views-row'>";
			$return_string .= "<div class='book-jacket'>";
				$pubTypeId =  $e['PubTypeId'];

        $return_string .= "<a href=\"".base_path()."eds/detail?".$params."\">";
        switch ($pubTypeId) {
          case 'academicJournal':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-academic-journals.png\" />";
            break;
          case 'audio':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-audio.png\" />";
            break;
          case 'biography':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-biographies.png\" />";
            break;
          case 'book':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-books.png\" />";
            break;
          case 'conference':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-conference-materials.png\" />";
            break;
          case 'dissertation':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-dissertations.png\" />";
            break;
          case 'ebook':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-ebooks.png\" />";
            break;
          case 'electronicResource':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-electronic-resources.png\" />";
            break;
          case 'newspaperArticle':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-news.png\" />";
            break;
          case 'periodical':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-reports.png\" />";
            break;
          case 'primarySource':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-reports.png\" />";
            break;
          case 'serialPeriodical':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-reports.png\" />";
            break;
          case 'unknown':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-reports.png\" />";
            break;
          case 'videoRecording':
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-videos.png\" />";
            break;
          default:
            $bookCover = "<img src=\"".base_path()."sites/all/themes/hfstacks/assets/img/stacks-reports.png\" />";
        }
        $return_string .= "</a>";

				$return_string .= $bookCover;
			$return_string .= "</div>";

			$return_string .= "<div class='item-details'>";
				// Title
				$return_string .= "<h3 class='title'>";
				if (!empty($e['Items'])) {
					foreach ($e['Items'] as $item) {
						if ($item['Group'] == 'Ti') {
							$return_string .= "<a href=\"/eds/detail?".$params."\">".$item['Data']."</a>";
						}
					}
				} else {
					$return_string .= "Title is not Available";
				}
				$return_string .= "</h3>";
				$return_string .= "<ul>";
					// Authors
					if (!empty($e['Items'])) {
						$return_string .= "<li class='item'>";
							$return_string .= "Authors :";
							foreach($e['Items'] as $item) {
								if ($item['Group'] == 'Au') {
									$return_string .= $item['Data'];
								}
							}
						$return_string .= "</li>";
					}
					// Source
					if (!empty($e['Items'])) {
						foreach($e['Items'] as $item) {
							if ($item['Group'] == 'Src') {
								$return_string .= "<li class='item'>";
									$return_string .= "<span>";
										$return_string .= $item['Data'];
									$return_string .= "</span>";
								$return_string .= "</li>";
							}
						}
						foreach($e['Items'] as $item) {
							if ($item['Group'] == 'SrcInfo') {
								$return_string .= "<li class='item'>";
									$return_string .= "<span>";
										$return_string .= $item['Data'];
									$return_string .= "</span>";
								$return_string .= "</li>";
							}
						}
					}
				$return_string .= "</ul>";
			$return_string .= "</div>";
		$return_string .= "</div>";
		$return_string .= '<div class="save-item-hold"><a class="btn-del" name="monitor" onclick="deleteItemToggle(this, \'' . $element[0] . '\', \'' . $element[1] .'\')">Remove</a></div>';
	}

	print $return_string;
	exit;
}


function _hf_eds_search_object($object_version, $filters=NULL){
	switch ($object_version){
		case "new":
			$search = null;
			$search = new EDSSearch();
			$search->query($filters);

      return $search;
			break;
		case "existing":

			break;
		case "url":
      global $base_url;
      return $base_url . '/eds/';
	}
}


/**
 * This function is for building the stats part of the search which.
 *
 * @param EDS search
 *  This is a EDS object.
 * @param array filters
 *  An array of filters that are applied to the search.
 *
 * @return string return_string
 *  The string of HTML content to be rendered
 */
function _hf_eds_search_build_search_stats($search, $filters){
	//Reset Filter
	$return_string = '<form class="select-all"><span class="lbl">Select all items</span> <input type="checkbox" name="monitor" onclick="selectAllItems(this)" /></form>';
	//saved items
	$return_string .= '<div id="saved_items_number"></div>';
	//keywords
	$return_string .= "<div class='keywords'>";
	$return_string .= _hf_eds_parse_tag($filters, $search);
	$return_string .= '<a href="' . base_path() . "eds" . '" class="reset-filter">Reset Filters</a><br/>';
	$return_string .= "</div>";

	$return_string .= _hf_eds_sortby($search);
	$return_string .= _hf_eds_build_pagination_bar($search);
	return $return_string;
}

/**
 * This function is for building the html for the availability in both the search
 * page as well as the detailed view page.
 *
 * @param array availability
 *  This is an array of information about the availability of an item that
 *  is passed back from the search API.
 *
 * @return string
 *  This function returns a string of html to be displayed for the current item
 */
function _hf_eds_build_availability($availability){
	$locations = array();
	$all_locations = array();
	$online = FALSE;
	$gmu_call_numbers = '';
	$all_call_numbers = '';
	$available_html = '';
	$gmu_codes = array('GR_MACEWAN', 'GR_MAC_ACC', 'GR_MAC_CAC', 'GR_MAC_TSV');
	if(!empty($availability->ItemInfo)){
		foreach ($availability->ItemInfo as $item){
			$all_locations[] = array("LibraryName" => $item->LibraryName, "CallNumber" => $item->CallNumber);
			if(in_array($item->LibraryID, $gmu_codes) != FALSE){
				$locations[] = array("LibraryName" => $item->LibraryName, "CallNumber" => $item->CallNumber);
			} elseif($item->CallNumber == 'Internet Access'){
				$online = TRUE;
			}
		}
	}

	//Removes duplicates in multi-dimensional array. API can return Multiple copies at one location
	$locations = array_map("unserialize", array_unique(array_map("serialize", $locations)));
	$all_locations = array_map("unserialize", array_unique(array_map("serialize", $all_locations)));


	if($online){
		$available_html = "<span class='avail icon-online'><strong>Available:</strong>Online</span>";
	} elseif(!empty($all_locations)){
		$available_html = "<span class='avail icon-location'><strong>Available at:</strong> " . count($all_locations) . " Locations</span>";
	}

	//Build the Call Numbers
	if(!empty($locations)){
		$gmu_call_numbers .= "<div class='call-numbers'><h4>Call Numbers</h4><ul>";
		foreach($locations as $entry){
			$gmu_call_numbers .= "<li class='library-name'>" . $entry['LibraryName'] . "</li>";
			$gmu_call_numbers .= "<li class='call-num'>" . $entry['CallNumber'] . "</li>";
		}
		$gmu_call_numbers .= "</ul></div>";
	}

	if(!empty($all_locations)){
		$all_call_numbers .= "<div class='call-numbers'><h4>Call Numbers</h4><ul>";
		foreach($all_locations as $entry){
			$all_call_numbers .= "<li class='library-name'>" . $entry['LibraryName'] . "</li>";
			$all_call_numbers .= "<li class='call-num'>" . $entry['CallNumber'] . "</li>";
		}
		$all_call_numbers .= "</ul></div>";
	}

	return array($available_html, $gmu_call_numbers, $all_call_numbers);
}

/**
 * This function is for building the hold button because it gets called on multiple
 * pages
 *
 * @param array availability
 *  An array of availability information passed back from the search API
 *
 * @return string
 *  The HTML string representation of the hold button if the object is holdable
 */
function _hf_eds_hold_button($availability){
	$hold_button = '';
	$online = FALSE;
	if($availability->DatabaseID == 'cat00565a'){
		if(!empty($availability->ItemInfo)){
			foreach ($availability->ItemInfo as $item){
				//if($item->LibraryID == 'GR_MAC_INT'){
					//$online = TRUE;
				//}
			}
		}
		if(!$online){
			global $base_url;
			$hold_button = '<a class="btn-placehold js-holdbutton" data-accession-number="' . $availability->AccessionNumber . '">Place Hold</a>';
		}
	}
	return $hold_button;
}

/**
 * This function is for building the stats part of the search which. The
 * logic can be pretty busy so I decided to build it into it's own function
 *
 * @param EDSSearch search
 *  This is a EDSSearch object.
 * @param array filters
 *  An array of filters that are applied to the search.
 *
 * @return string return_string
 *  The string of HTML content to be rendered
 */
function _hf_eds_build_search_stats($search, $filters){
	$user = $GLOBALS['user'];
	$uid = $user->uid;

	if (isset($_REQUEST['query'])) {
		$query = $_REQUEST['query'];
	} else {
		$query = '';
	}

	// Paging
	$return_string = _hf_eds_build_pagination_bar($search);
	//savelist link
	$return_string .= _hf_eds_sortby($search);

	//keywords
	$return_string .= "<div class='keywords'>";
	$return_string .= "<h3>Your Filters</h3>";
	$return_string .= "<div class='items'>";
	$return_string .= _hf_eds_parse_tag($filters, $search);
	$return_string .= "</div>";
	$return_string .= '<a href="' . base_path() . "eds" . "?query=" . $query . '" class="reset-filter">Reset Filters</a>';
	$return_string .= "</div>";

  // check if user is logged in, and has patron role
  if (!empty($uid) && user_has_role(4, $user)) {
    $saveFlag = false;
    $saveID = '';

    $db_query = db_select('stacks_searchlist', 's');
    $db_query->fields('s', array('lid'));
    $db_query->fields('s', array('title'));
    $db_query->fields('s', array('url'));
    $db_query->condition('s.uid', $uid, '=');
    $db_query->condition('s.title', ucfirst($query), '=');
    $results = $db_query->execute();

    while ($record = $results->fetchAssoc()) {
      $saveFlag = true;
      $saveID = $record['lid'];
    }

    /*
    if ($saveFlag == true) {
      $return_string .= "<a class=\"link-wishlist\" title=\"Remove From Saved Search\" onclick=\"deleteSearchToggle(this, '" . $saveID . "')\" style=\"margin-right:20px;\"><strong>Remove From Saved Search</strong></a>";
    } else {
      $return_string .= "<a class=\"link-wishlist\" title=\"Save This Search\" onclick=\"saveSearchToggle(this, '" . ucfirst($query) . "', '" . request_uri() . "')\" style=\"margin-right:20px;\">Save This Search</a>";
    }
    */
  }

	return $return_string;
}


/**
 * function for building the "tags" for the search". The returned strings from the
 * API are not formatted very nicely so this function attempts to make things a bit cleaner
 *
 * @param array filters
 *  An array of filters that are applied to the current search
 *
 * @param EDSSearch search
 *  A search object for the the current search
 *
 * @return string
 */
function _hf_eds_parse_tag($filters, $search){
	$return_string = '';
	foreach($filters as $key => $data){
		switch($key){
			case 'searchfield':
				$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">';
				if($data == 'KE'){
					$return_string .= 'Keyword : Keyword';
				} elseif($data == 'TI'){
					$return_string .= 'Keyword : Title';
				} elseif($data == 'AU'){
					$return_string .= 'Keyword : Author';
				} elseif($data == 'SU'){
					$return_string .= 'Keyword : Subject';
				} elseif($data == 'DE'){
					$return_string .= 'Keyword : Subject Phrase';
				}
				$return_string .= ' (X)</a>';
				break;
			case 'ff':
				foreach ($data as $e){
					$args = explode(":", $e);
					if($args[0] == 'SourceType'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Format : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'SubjectEDS'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Subject : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'Language'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Language : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'LocationLibrary'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Location : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'Publisher'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Publisher : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'Journal'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Publication : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'SubjectGeographic'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Geographic : ' . $args[1] . " (X)</a>";
					} elseif ($args[0] == 'ContentProvider'){
						$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $e) . '">Content Provider : ' . $args[1] . " (X)</a>";
					}
				}
				break;
			case 'publicationdate':
				$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">';
				$dates = explode('-', $data);
				if(strlen($data) == 6){
					$from_date = date('F, Y', strtotime($dates[0] . '01'));
					$return_string .= "After: " . $from_date;
				} elseif(strlen($data) == 7) {
					$to_date = date('F, Y', strtotime($dates[1] . '01'));
					$return_string .= "Before: " . $to_date;
				} else {
					$from_date = date('F, Y', strtotime($dates[0] . '01'));
					$to_date = date('F, Y', strtotime($dates[1] . '01'));
					$return_string .= "Publication Date Range: " . $from_date . " to " . $to_date;
				}
				$return_string .= '(X)</a>';
				break;
			case 'reviewed':
				$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">Peer Reviewed: Yes (X)</a>';
				break;
			case 'sortorder':
				if($data == 're'){
					$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">Sort Order : Relevance (X)</a>';
				} elseif($data == 'dd'){
					$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">Sort Order : Publication Date Descending (X)</a>';
				} elseif($data == 'da'){
					$return_string .= '<a href="' . base_path() . "eds" . $search->remove_from_url($key, $data) . '">Sort Order : Publication Date Acsending (X)</a>';
				}
				break;
		}
	}
	return $return_string;
}


/**
 * function for building a search listing for a specific item on the search page.
 */
function _hf_eds_build_search_listing($search, $item_record){
	$return_string = "<div class='search-listing' data-database='$item_record->DatabaseID' data-accession-number='$item_record->AccessionNumber'>";
	$return_string .= "<div class='large-9 columns'>";

	if(!empty($item_record->Description->Image)){
		$return_string .= "<div class='book-cover'>";
		$return_string .= "<a href=\"" . base_path() . "eds" . '/detailed-view/' . $item_record->DatabaseID . '/' . $item_record->AccessionNumber. '?query=' . $_GET['query'] . '">';
		$return_string .= '<img src="' . $item_record->Description->Image . '"/>';
		$return_string .= "</a>";
		if(!empty($item_record->PublicationInfo->PublicationType)){
			$fileFormat = str_replace(" ", "-", $item_record->PublicationInfo->PublicationType);
			$fileFormat = strtolower($fileFormat);
			$return_string .= "<div class='file-format ". $fileFormat ."'><span></span>" . $item_record->PublicationInfo->PublicationType . "</div>";
		}
		$return_string .= "</div>";
	}

	//assign file format class
	$return_string .= "<div class='item-details'>";
	$return_string .= "<h3><a href=\"" . base_path() . "eds" . '/detailed-view/' . $item_record->DatabaseID . '/' . $item_record->AccessionNumber. '?query=' . $_GET['query'] . '">' . $item_record->Description->Title . "</a></h3>";
	$return_string .= "<ul class='js-search-listing-details'>";
	//Loop through authors and build the author html string
	if(!empty($item_record->Contributors)){
		$authors = '';
		foreach($item_record->Contributors as $entry){
			if($entry->Type == 'Author'){
				$authors .= '<a href="' . $entry->Link . '">' . $entry->Value . '</a>, ';
			}
		}
		if(count($item_record->Contributors) > 1){
			$return_string .= "<li class='author'><strong>Authors:</strong> " . substr($authors, 0, -2) . "</li>";
		} else {
			$return_string .= "<li class='author'><strong>Author:</strong> " . substr($authors, 0, -2) . "</li>";
		}
	}
	//Build the publication date html string
	if(!empty($item_record->PublicationInfo->PublicationDate)){
		$return_string .= "<li class='publication-date'><strong>Publication Date:</strong> " . $item_record->PublicationInfo->PublicationDate . "</li>";
	}

	//Finish html
	$return_string .= "</ul>";
	$return_string .= "</div>";
	$return_string .= "</div>";
	$return_string .= "<div class='large-3 columns'>";
	$return_string .= "<div class='form-wrapper'>";
	$return_string .= '<form id="saved-items-form">Select Item <input type="checkbox" id="' . $item_record->AccessionNumber . "-" . $item_record->DatabaseID . '" class="select_item_checkbox" name="monitor" onclick="saveItemToggle(this, \'' . $item_record->AccessionNumber . '\', \'' . $item_record->DatabaseID . '\')" /></form>';

	if(!empty($item_record->ControlNumbers)){
		$count = 0;
		foreach($item_record->ControlNumbers as $control_number){
			if($control_number->Type == 'ISBN' && $count != 1){
				$return_string .= '<a class="btn-placehold js-holdbutton" data-accession-number="' . $control_number->Value  . '">Place Hold</a>';
				$count = 1;
			}
		}
	}

	$return_string .= "</div>";

	$return_string .= "</ul>";
	$return_string .= "</div></div>";
	$return_string .= "<div id=\"hold-confirmation\" class=\"reveal-modal small\" >";
		$return_string .= "<div class=\"js-form-message\"></div>";
		$return_string .= "<div class=\"js-hold-form\"></div>";
		$return_string .= "<a class=\"close-reveal-modal\">&#215;</a>";
	$return_string .= "</div>";
	return $return_string;
}

/**
 * When you need to create an array for GmuClass containing the correct values use this function on the output of
 * drupal_get_query_parameters(). This function formats the url parameters for passing to the search API
 *
 * @param array url_args
 *  An array of url arguments. Ususally comes from drupal_get_query_parameters
 *
 * @return array url_args
 *  Takes the passed array and formats it for use by the EDSSearch class
 */
function _hf_eds_search_url_to_filters($url_args){
	$date_string = '';
	if(!empty($url_args['from_date'])){
		$date_string .= date("Ym", strtotime($url_args['from_date']));
	}
	if(!empty($url_args['to_date'])){
		$date_string .= "-" . date("Ym", strtotime($url_args['to_date']));
	}
	if(!empty($date_string)){
		//Make sure that from date is before the to date
		if(date("Ym", strtotime($url_args['from_date'])) <= date("Ym", strtotime($url_args['to_date']))){
			$url_args['publicationdate'] = $date_string;
		} else {
			drupal_set_message('The from date must be before the to date', 'warning');
		}
	}
	//Checking to see if peer_reviewed was set
	if(!empty($url_args['reviewed'])){
		if($url_args['reviewed'] == 'on'){
			$url_args['reviewed'] = 'y';
		}
	}
	return $url_args;
}


/**
 * function for building the bottom pagination bar of the search page.
 */
function _hf_eds_build_pagination_bar($search){
	$limit = isset($_REQUEST['resultsperpage'])?$_REQUEST['resultsperpage']:10;

	$return_string = "<div class='filter-items'>";

  $search->search_url = str_replace('"','',$search->search_url);
  $search->url_args = str_replace('"','',$search->url_args);

	if($search->hits == 0) {
		$return_string .= "<ul class='pager-item hide'>";
		$return_string .= "<li class='hit'>0 Results</li>";
		$return_string .= "</ul>";
		$return_string .= "</div>";
		return $return_string;
	} else {
		$first_number = '';
		$return_string .= "<ul class='pager-item'>";
		if($search->pagenumber > 1){
			$first_number = ($search->pagenumber - 1) * $limit;
			$return_string .= '<li class="prev"><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('pagenumber', $search->pagenumber - 1)) . '"><i class="eds-icon-prev"></i><span>Previous</span></a></li>';
		} else {
			$first_number = '1';
			$return_string .= '<li class="prev first-nav disabled"><i class="eds-icon-prev"></i><span>Previous</span></li>';
		}
		$second_number = '';
		if($search->pagenumber * $limit > $search->hits) {
			$second_number = number_format($search->hits);
		} else {
			$second_number = $search->pagenumber * $limit;
		}
		$pagination_middle = $first_number . '-' . $second_number . ' of <span class="hit-num">' . number_format($search->hits) . ' results for "' . $_GET['query'] . '"</span>';
		$return_string .= "<li class='hit'>$pagination_middle</li>";

		if($search->pagenumber * $search->results_per_page >= $search->hits){
			$return_string .= '<li class="next disabled"><i class="eds-icon-next"></i><span>Next</span></li>';
		} else {
			$return_string .= '<li class="next"><a href="' . base_path() . "eds" . $search->add_to_url('pagenumber', $search->pagenumber + 1) . '"><i class="eds-icon-next"></i><span>Next</span></a></li>';
		}
		$return_string .= "</ul>";
		$return_string .= "</div>";
		return $return_string;
	}
}

/**
 * function for displaying selected facets
 */
function _hf_eds_filter_header(){
	$facet_terms = $_REQUEST['ff'];
	$return_string = "<div class=\"git block-hf-eds-search-header\">";

	if (!empty($facet_terms)) {
		$return_string .= "<ul>";
		foreach ($facet_terms as $facet) {
			$return_string .= "<li><a href=\"/" . $facet . "\">" . $facet . "</a></li>";
		}
		$return_string .= "</ul>";
	}

	$return_string .= "</div>";

	return $return_string;
}

/**
 * function for building Page Size and Sort By
 */
function _hf_eds_sortby($search){
	$limit = isset($_REQUEST['resultsperpage'])?$_REQUEST['resultsperpage']:10;
	$limit = intval($limit);
	$sortBy = isset($_REQUEST['sortorder'])?$_REQUEST['sortorder']:'relevance';
	// choose Page size
	$return_string = "<div class='pagesize-sortby'>";
	$return_string .= "<span class='display-settings-lbl'>Display Settings</span>";
	$return_string .= "<div class='display-settings-wrapper'>";
	$return_string .= "<div class='page-size drop-down-cstm'>";
	$return_string .= "<a class='lbl'>Results per page: <span class='limit'>".$limit."</span></a>";
	$return_string .= "<ul>";
	// retain order as well as make sure that when no resultsperpage is present that 10 is selected.
	if($limit == 25){
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '10')) . '">10</a></li>';
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '25')) . '">25</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '50')) . '">50</a></li>';
	} elseif($limit == 50){
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '10')) . '">10</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '25')) . '">25</a></li>';
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '50')) . '">50</a></li>';
	} else {
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '10')) . '">10</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '25')) . '">25</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('resultsperpage', '50')) . '">50</a></li>';
	}
	$return_string .= "</ul>";
	$return_string .= "</div>";

	// sorting
	$return_string .= "<div class='sorting drop-down-cstm'>";
	if($sortBy == 'dd'){
		$return_string .= "<a class='lbl'>Sort By: Date Descending</a>";
	} elseif($sortBy == 'da') {
		$return_string .= "<a class='lbl'>Sort By: Date Ascending</a>";
	} else {
		$return_string .= "<a class='lbl'>Sort By: Relevance</a>";
	}
	$return_string .= "<ul>";
	// apply active class to the sorts if they are active
	if($sortBy == 'dd'){
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 're')) . '">Relevance</a></li>';
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'dd')) . '">Publication Date Descending</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'da')) . '">Publication Date Ascending</a></li>';
	} elseif($sortBy == 'da') {
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 're')) . '">Relevance</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'dd')) . '">Publication Date Descending</a></li>';
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'da')) . '">Publication Date Ascending</a></li>';
	} else {
		$return_string .= '<li><a class="active" href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 're')) . '">Relevance</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'dd')) . '">Publication Date Descending</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . str_replace('"', '\'', $search->add_to_url('sortorder', 'da')) . '">Publication Date Ascending</a></li>';
	}
	$return_string .= "</ul>";
	$return_string .= "</div>";
	$return_string .= "</div>";
	$return_string .= "</div>";
	$return_string .= "<a class='btn-filter'><i></i> Filter</a>";


	return $return_string;
}

function string_removequotes($s) {
	$result = preg_replace('/^([\'"])(.*)\\1$/', '\\2', $s);
	return $result;
}

function string_parsefacet($s) {
	$result = preg_match('#\((.*?)\)#', $s, $match);
	$result = preg_match('#\((.*?)\)#', $s, $match);
	return $match[1];
}

/**
 * function for building the html for the facets in the search
 * block. If the array is empty is return a empty list.
 *
 * @param string title
 *  This is the title that will display in the h3 tag
 * @param array facet_array
 *  This is an array of results that are returned by
 *  the search API.
 * @param EDSSearch search
 *  This is a search object that is used for creating the urls
 *
 * @return string
 *  Returns a string of html containing the items passed
 */
function _hf_eds_search_facet_builder($title, $facet_array, $search) {
  $search->search_url = str_replace('"','%22',$search->search_url);
  $search->url_args = str_replace('"','%22',$search->url_args);

	$return_string = "<h3>" . $title . "</h3><ul>";
	if(!empty($facet_array['Values'])){
		foreach($facet_array['Values'] as $e){
			$return_string .= "<li><a href=\"" . base_path() . "eds" . $search->add_to_url('ff', $facet_array['Id'] . ':' . $e['Value']) . "\">" . ucwords($e['Value']) . " <strong>(" . $e['Count'] . ")</strong></a></li>";
		}
	}
	return $return_string . "</ul>";
}

/**
 * function for creating hidden fields of the current filters for forms, like date and peer-reviewed, that
 * use GET for an action and need to have the current search filters passed along with them.
 *
 * @param array urls_args
 *  This is the url arguments in array from. Comes from drupal_get_query_parameters()
 *
 * @return string return_string
 *  A string of hidden inputs containing the data passed by url_args
 */
function _hf_eds_search_hidden_fields($url_args){
	$return_string = '';
	if(!empty($url_args)){
		foreach($url_args as $key => $data){
			if($key == 'ff'){
				foreach($data as $data_input){
					$return_string .= '<input type="hidden" name="ff[]" value="' . $data_input . '">';
				}
			} else {
				$return_string .= '<input type="hidden" name="' . $key . '" value="' . $data . '">';
			}
		}
	}
	return $return_string;
}

function hf_eds_search_block_info() {
	$blocks['hf_eds_search_filters'] = array(
		'info' => t('HF search filter block'),
		'cache' => DRUPAL_NO_CACHE,
	);
	return $blocks;
}

/**
 * implements the hook_block_view()
 *
 * defines the content of the hf_eds_search_filter block
 */
function hf_eds_search_block_view($delta = ''){
	switch ($delta){
		case 'hf_eds_search_filters':
			$block['subject'] = "";
			if (user_access('access content')){
				$block['content'] = hf_eds_search_filter_block();
			}
			return $block;
	}
}

/**
 * @block hf_eds_search_filters
 *  This is the function that builds the content for
 *  the search filter block.
 */
function hf_eds_search_filter_block($search) {
	// get facets results
	$connector = new EDSConnector();
  $facets = $search->raw_facets;
  $return_string = '';

	// get the url paramters and convert them into a filter list. 2 lines of code for debugging
	$url_args = drupal_get_query_parameters();
	$filters = _hf_eds_search_url_to_filters($url_args);
	$return_string = "";

	$return_string .= "<section class=\"block-hf-eds-search-filters\">";
	$return_string .= "<a class='btn-close'>X</a>";
  $return_string .= "<h2 class='ttl-refine'>Refine Search</h2>";

  // the search type selector
  $return_string .= "<div>";
    $return_string .= "<h4>Type</h4>";
    $return_string .= '<a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'KE') . '">Keyword</a>';
    $return_string .= '<a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'TI') . '">Title</a>';
    $return_string .= '<a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'AU') . '">Author</a>';
    $return_string .= '<a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'SU') . '">Subject</a>';
    $return_string .= '<a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'DE') . '">Subject Phrase</a>';
  $return_string .= "</div>";

	// if there is no query don't try and build the block
	if(!empty($filters['query'])){
		if (isset($_GET['query'])) {
			$request_query = $_GET['query'];
		} else {
			$request_query = '';
		}
		if (isset($_GET['catalog'])) {
			$request_catalog = $_GET['catalog'];
		} else {
			$request_catalog = '';
		}
		if (isset($_GET['type'])) {
			$request_type = $_GET['type'];
		} else {
			$request_type = '';
		}
		if (isset($_GET['pagenumber'])) {
			$request_pagenumber = $_GET['pagenumber'];
		} else {
			$request_pagenumber = '';
		}
		if (isset($_GET['y'])) {
			$request_y = $_GET['y'];
		} else {
			$request_y = '';
		}
		if (isset($_GET['ff'])) {
			$request_ff = $_GET['ff'];
		} else {
			$request_ff = '';
		}
    if (isset($_GET['searchfield'])) {
      $request_searchfield = $_GET['searchfield'];
    } else {
      $request_searchfield = '';
    }

		$request_string = '?';
		if (!empty($request_query)) {
			$request_string .= 'query='.$request_query;
		}
		if (!empty($request_catalog)) {
			$request_string .= '&catalog='.$request_catalog;
		}
		if (!empty($request_type)) {
			$request_string .= '&type='.$request_type;
		}
		if (!empty($request_pagenumber)) {
			$request_string .= '&pagenumber='.$request_pagenumber;
		}
		if (!empty($request_y)) {
			$request_string .= '&y='.$request_y;
		}
    if (!empty($request_ff)) {
      foreach ($request_ff as $request_ff_item){
        $request_string .= '&ff[]='.$request_ff_item;
      }
    }
    if (!empty($request_searchfield)) {
      $request_string .= '&searchfield='.$request_searchfield;
    }

		//$search = _hf_eds_search_object("new");

    $search->search_url = str_replace('"','%22',$request_string);
    $search->url_args = str_replace('"','%22',$request_string);

		// building the Keyword Section
    /*
		$return_string .= "<h3>Keyword</h3><ul>";
		$return_string .= '<li><a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'KE') . '">Keyword</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'TI') . '">Title</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'AU') . '">Author</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'SU') . '">Subject</a></li>';
		$return_string .= '<li><a href="' . base_path() . "eds" . $search->add_to_url('searchfield', 'DE') . '">Subject Phrase</a></li>';
		$return_string .= "</ul>";
    */

		// build the HTML for the facet arrays
		$facetCount = 0;
		foreach($facets as $facet){
			$return_string .= _hf_eds_search_facet_builder($facet['Label'], $facets[$facetCount], $search);
			$facetCount++;
		}

		// build the Date Section
		$return_string .= "<h3>Publication Date</h3>";
		$return_string .= "<div class='form-wrapper'>";
		$return_string .= '<form action="' . base_path() . "eds" . $request_string .'" method="get">';
		$return_string .= _hf_eds_search_hidden_fields($url_args);
		// if a from date was passed make it appear in the UI
		if(!empty($filters['from_date'])){
			$return_string .= '<label>From:</label> <input type="text"  name="from_date" value="' . $filters['from_date'] . '" class="datepicker">';
		} else {
			$return_string .= '<label>From:</label> <input type="text" name="from_date" class="datepicker">';
		}
		if(!empty($filters['to_date'])){
			$return_string .= '<label>To:</label> <input type="text" name="to_date" value="' . $filters['to_date'] . '"  class="datepicker">';
		} else {
			$return_string .= '<label>To:</label> <input type="text" name="to_date" class="datepicker">';
		}
		$return_string .= '<input type="submit" name="update" value="Update" class="button">';
		$return_string .= "</form>";
		$return_string .= "</div>";
    
		// build the Peer Reviewed Section
		$return_string .= "<h3>Peer Reviewed</h3>";
		$return_string .= "<div class='form-wrapper'>";
		$return_string .= '<form action="' . base_path() . "eds" . $request_string .'" method="get" name="peer_review" id="peer_review">';
		$return_string .= _hf_eds_search_hidden_fields($url_args);
		if(!empty($filters['reviewed'])){
			if($filters['reviewed'] == 'y'){
				$return_string .= '<input type="checkbox" checked="checked" name="reviewed" id="reviewed" onclick="document.forms.peer_review.submit();"><label>Peer Reviewed:</label> ';
			} else {
				$return_string .= '<input type="checkbox" name="reviewed" id="reviewed" onclick="document.forms.peer_review.submit();"><label>Peer Reviewed:</label>';
			}
		} else {
			$return_string .= '<input type="checkbox" name="reviewed" id="reviewed" onclick="document.forms.peer_review.submit();"><label>Peer Reviewed:</label>';
		}
		$return_string .= "</form>";
		$return_string .= "</div>";
		$return_string .= "</section>";
	}
	return $return_string;
}

function hf_eds_savelist() {
  // connect to EDS
  $connector = new EDSConnector();

  $user = $GLOBALS['user'];
  $uid = $user->uid;

  $query = db_select('stacks_savelist', 'w');
  $query->fields('w', array('AN'));
  $query->fields('w', array('DB'));
  $query->condition('w.uid',$uid,'=');
  $results = $query->execute();

  $savelist = array();

  while($record = $results->fetchAssoc()) {
    // get EDS results
    $savelist[] = $connector->requestSavelist($record["AN"], $record["DB"]);
  }

  return theme('eds_savelist', array('vars' => $savelist));
}

function hf_eds_savelist_add($value) {
  $user = $GLOBALS['user'];
  $uid = $user->uid;

  db_insert('stacks_savelist')
    ->fields(array(
      'an' => $_POST['AN'],
      'db' => $_POST['DB'],
      'uid' => $uid,
      'timestamp' => REQUEST_TIME
    ))->execute();

  exit;
}

function hf_eds_savelist_delete($value) {
  $user = $GLOBALS['user'];
  $uid = $user->uid;

  db_delete('stacks_savelist')
		->condition('an', $_POST['AN'])
		->condition('uid', $uid)
    ->execute();

  exit;
}

function hf_eds_savesearch() {
  $user = $GLOBALS['user'];
  $uid = $user->uid;

  $query = db_select('stacks_searchlist', 's');
  $query->fields('s', array('lid'));
  $query->fields('s', array('title'));
  $query->fields('s', array('url'));
  $query->condition('s.uid',$uid,'=');
  $results = $query->execute();
  
  $savedSearches = "<ul>";
  while($record = $results->fetchAssoc()) {
    // get saved searches for this user
    $savedSearches .= "<li>";
    $savedSearches .= "<a href=\"".$record["url"]."\" class=\"saved-link\">".$record["title"]."</a><a class=\"btn-savesearch deleted\" title=\"Remove from saved search list\" onclick=\"deleteSearchListToggle(this, '".$record["lid"]."')\">X</a>";
    $savedSearches .= "</li>";
  }
  $savedSearches .= "</ul>";
  return theme('eds_savesearch', array('vars' => $savedSearches));
}

function hf_eds_savesearch_add($value) {
  $user = $GLOBALS['user'];
  $uid = $user->uid;

  db_insert('stacks_searchlist')
    ->fields(array(
      'title' => $_POST['TITLE'],
      'url' => $_POST['URL'],
      'uid' => $uid,
      'timestamp' => REQUEST_TIME
    ))->execute();

  exit;
}

function hf_eds_savesearch_delete($value) {
  $user = $GLOBALS['user'];
  $uid = $user->uid;

  db_delete('stacks_searchlist')
    ->condition('lid', $_POST['ID'])
    ->condition('uid', $uid)
    ->execute();

  exit;
}

function hf_eds_lookup() {
  global $base_url;

  $connector = new EDSConnector();
  $connector->authorizer();

  if ($connector->authorizer() != 'error') {
    $url_args = drupal_get_query_parameters();
    $filters = _hf_eds_search_url_to_filters($url_args);

    //Search was just initiated
    if(!empty($filters['query'])){
      $search = _hf_eds_search_object("new", $filters);

      $db = $search->search_results[0]['DbId'];
      $an = $search->search_results[0]['An'];

      $link = $base_url."/eds/detail?db=".$db."&an=".$an."&isbn=".$filters['query'];
    } else {
      $link = $base_url;
    }
  } else {
    $link = $base_url;
  }

  drupal_goto($link);

  $return_string = '<div class="page-library-search bg-wrapper">';
  $return_string .= '<div>redirecting...</div>';
  $return_string .= '</div>';
  return $return_string;
}