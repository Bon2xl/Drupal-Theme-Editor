<?php

/**
 * @file
 * Install for a studyroom reservations.
 */

/**
 * Implements hook_install().
 */
function studyroom_reservation_install() {
  // Create all fields.
  studyroom_reservation_create_fields();

  // Create default reservation types.
  $values = array(
    'type' => 'user',
    'label' => 'User',
    'description' => 'This is the regular booking type for normal users.',
    'locked' => 1,
    'public' => 1,
    'ui'     => 1,
    'module' => 'studyroom_reservation',
  );
  $type = studyroom_reservation_type_create($values);
  $type->save();

  $values = array(
    'type' => 'admin',
    'label' => 'Admin',
    'description' => 'This is the booking type used for administative purposes.',
    'locked' => 1,
    'public' => 0,
    'weight' => 25,
    'ui'     => 1,
    'module' => 'studyroom_reservation',
  );
  $type = studyroom_reservation_type_create($values);
  $type->save();
}

/**
 * Implements hook_uninstall().
 */
function studyroom_reservation_uninstall() {
  // Delete field_reservation_datetime field.
  field_delete_field('field_reservation_datetime');

  // Delete the field_reservation_occupancy
  field_delete_field('field_reservation_occupancy');

  // Delete all other attached fields.
  $types = db_query("SELECT type FROM {studyroom_reservation}")->fetchCol();
  foreach ($types as $type) {
    field_attach_delete_bundle('studyroom_reservation', $type);
  }
}

/**
 * Implements hook_schema().
 */
function studyroom_reservation_schema() {
  $schema = array();

  $schema['studyroom_reservation'] = array(
    'description' => 'The base table for studyroom_reservation entities.',
    'fields' => array(
      'reservation_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Identifier for a booking.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The {studyroom_reservation_type}.type of this booking.',
      ),
      'space_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {studyroom_space}.space_id of the space for this booking.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user for this booking.',
      ),
      'duration' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The duration (in seconds) for this booking.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the booking was created.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp when the booking was most recently saved.',
      ),
      'locked' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'A boolean indicating whether the administrator may delete this booking through the UI.',
      ),
    ),
    'primary key' => array('reservation_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['studyroom_reservation_type'] = array(
    'description' => 'Stores information about defined booking types.',
    'fields' => array(
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The machine-readable name of this booking type.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The human-readable name of this booking type.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
        'translatable' => TRUE,
        'description' => 'A brief description of this booking type.',
      ),
      'increment_limits' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of increment_limits settings.',
      ),
      'ui' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'A boolean indicating whether the booking type should be displayed in the UI.',
      ),
      'public' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'A boolean indicating whether the booking type is for general use.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this booking type in relation to others.',
      ),
      'locked' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'A boolean indicating whether the administrator may delete this type.',
      ),
      // These two fields provide exportable support
      // and come from Entity module definitions.
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The name of the providing module if the entity has been defined in code.',
      ),
    ),
    'primary key' => array('type'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Remove colunms 'language' and 'reservation_type_id'.
 */
function studyroom_reservation_update_7001() {
  drupal_flush_all_caches();

  db_change_field('studyroom_reservation_type', 'reservation_type_id', 'reservation_type_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));

  db_drop_primary_key('studyroom_reservation_type');
  db_add_primary_key('studyroom_reservation_type', array('type'));

  // Remove old primary key field.
  // @TODO does not work, throw PDO error.
  //db_drop_field('studyroom_reservation_type', 'reservation_type_id');

  // Remove unused language field.
  db_drop_field('studyroom_reservation', 'language');  
}
