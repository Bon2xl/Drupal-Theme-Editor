<?php

/**
 * @file
 * Main module for the studyroom availabily.
 */


/**
 * Implements hook_menu().
 */
function studyroom_availability_menu() {
  $items = array();

  $items['availability'] = array(
    'title' => 'Room Bookings',
    'page callback' => 'studyroom_availability_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['availability/%location/%date'] = array(
    'title' => 'Room Bookings',
    'page callback' => 'studyroom_availability_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function studyroom_availability_permission() {
  $permissions = array(
    'see past studyroom_availability' => array(
      'title' => t('See past availability'),
      'description' => t('Allows users to see past availability schedule'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function studyroom_availability_theme() {
  $module_path = drupal_get_path('module', 'studyroom_availability');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );

  return array(
    'studyroom_availability_day' => $base + array(
      'variables' => array(
        'items' => array(),
        'availability' => NULL,
        'location' => NULL,
        'date' => NULL,
      ),
      'template' => 'studyroom-availability-day',
    ),
    'studyroom_availability_week' => $base + array(
      'variables' => array(
        'items' => array(),
        'availability' => NULL,
        'space' => NULL,
      ),
      'template' => 'studyroom-availability-week',
    ),
    'studyroom_availability_search' => $base + array(
      'template' => 'studyroom-availability-search',
    ),
    'studyroom_availability_results' => $base + array(
      'template' => 'studyroom-availability-results',
    ),
    'studyroom_availability_week_navigation' => $base + array(
      'variables' => array(
        'links' => array(),
      ),
    ),
  );
}

/**
 * Searches for availability and constructs the page.
 *
 * @param string $location
 *   The location for the search.
 * @param sting $date
 *   The start date for the search.
 */
function studyroom_availability_page($location = NULL, $date = NULL) {
  //dpm($location);
  $spaces = studyroom_space_get_spaces();

  if (empty($spaces)) {
    drupal_set_message(t('No rooms have been defined yet, so you cannot search for availability.'), 'error');
    drupal_goto();
  }

  $spaces_object = studyroom_space_load($location);

  $content = array();

  // Check validity of date.
  $date_invalid = FALSE;
  if (isset($date)) {
    $date_obj = new DateObject($date);
    if (isset($date_obj->errors) && count($date_obj->errors)) {
      unset($date_obj);
      $date_invalid = TRUE;
    }
  }

  $loc_found = FALSE;
  if (!isset($location)) {
    // See if only one location.
    $loc = studyroom_space_locations();
    if (count($loc) == 1) {
      $location_obj = array_shift($loc);
      $loc_found = TRUE;
    }
  }
  else {
    $location_obj = studyroom_space_location_load($location);
    if (is_object($location_obj)) {
      $loc_found = TRUE;
    }
  }

  if (isset($date_obj) && $loc_found) {
    /*
    if (!user_is_logged_in()) {
      drupal_set_message(t('You must !login to make a reservation.',
        array('!login' => l('Sign in', 'user/login', array('query' => drupal_get_destination())))));
    }
    */
    $content['date_formatted'] = date_format_date($date_obj, 'studyroom_availability_date');
    $content['results'] = studyroom_availability_spaces($location_obj, $date_obj);
    $output = theme('studyroom_availability_results', $content);
  } elseif (!empty($spaces_object)) {
    //dpm($spaces_object);
    $content['date_formatted'] = date_format_date($date_obj, 'studyroom_availability_date');
    $content['results'] = studyroom_availability_spaces_single($spaces_object, $date_obj);
    $output = theme('studyroom_availability_results', $content);
  } else {
    // @todo Fix this logic here.  Issue if more that one location found.
    $content['search_form'] = drupal_get_form('studyroom_availability_search_form');
    if ($date_invalid) {
      $content['message'] = '<p>' . t('Date sent could not be used.') . '</p>';
    }
    elseif (!$loc_found) {
      $content['message'] = '<p>' . t('A location could not be found to search on.') . '</p>';
    }
    else {
      $content['message'] = '<p>' . t('Perform a search to get studyroom availability information.') . '</p>';
    }
    $output = theme('studyroom_availability_search', $content);
  }

  return $output;
}

/**
 * Generate the search form.
 */
function studyroom_availability_search_form($form, $form_state) {
  $query_params = drupal_get_query_parameters();
  if (isset($query_params['cat'])) {
    $query_cat = $query_params['cat'];
    $location_status = TRUE;
  } else {
    $query_cat = '';
    $location_status = FALSE;
  }

  $current_space = explode("/",current_path());
  $current_space = $current_space[1];

  $form = array();
  $form['search_date'] = array(
    '#prefix' => '<div class="studyroom-availability-search-date">',
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#title' => t('Date'),
    '#date_type' => DATE_DATETIME,
    '#date_format' => 'Y-m-d',
    '#default_value' => date('Y-m-d'),
    '#date_increment' => 1,
    '#date_year_range' => '0:+1',
    '#required' => TRUE,
  );

  $form['location'] = array(
    '#title' => t('Room'),
    '#prefix' => '<div id="location_wrapper">',
    '#suffix' => '</div>',
    '#disabled' => $location_status,
  );

  $locations = studyroom_space_locations();
  $spaces = studyroom_space_get_spaces();

  if (is_array($locations) && count($locations) > 1) {
    foreach ($locations as $location) {
      $suboptions = array();
      if (is_array($spaces) && count($spaces) > 1) {
        foreach ($spaces as $space) {
          if ($location->type == $space->type) {
            $suboptions[$space->space_id] = $space->label;
          }
        }
      }
      //$options[$location->type] = $location->label;
      $options[$location->label] = $suboptions;
    }
    $form['location']['#type'] = 'select';
    $form['location']['#optgroup'] = 'test';
    $form['location']['#options'] = $options;
    $form['location']['#default_value'] = $current_space;
  }
  else {
    $loc = array_shift($locations);
    $form['location']['#type'] = 'hidden';
    $form['location']['#value'] = $loc->type;
  }

  $categories = taxonomy_allowed_values(field_info_field('field_space_category'));
  $category_array = array();
  $category_array[0] = 'All';

  foreach ($categories as $key => $value) {
    $category_array[$key] = $value;
  }

  $form['category'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => $category_array,
    '#default_value' => $query_cat,
    '#description' => t('Category must be set to ALL to choose specific room'),
    '#ajax' => array(
      'callback' => 'studyroom_availability_category_update',
      'wrapper' => 'location_wrapper',
      'progress' => array(
        'message' => '',
        'type' => 'throbber',
      ),
    ),
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );
  $submit = array();

  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search for Availability'),
    '#submit' => $submit + array('studyroom_availability_search_form_submit'),
  );

  $form['actions']['reset'] = array(
    '#type' => 'button',
    '#button_type' => 'reset',
    '#value' => t('Reset'),
    '#weight' => 9,
    '#validate' => array(),
    '#attributes' => array(
      'onclick' => 'this.form.reset(); document.getElementById("edit-location--2").disabled=false; return false;',
    ),
  );

  return $form;
}

/**
 * Form submit handler for studyroom_availability_search_form().
 */
function studyroom_availability_search_form_submit(&$form, &$form_state) {
  if ($form_state['values']['category'] == 0) {
    $search_date = new DateTime($form_state['values']['search_date']);
    drupal_goto('availability/' . $form_state['values']['location'] . '/' . $search_date->format('Y-m-d'));
  } else {
    drupal_goto('roombooking', array('query' => array('cat' => $form_state['values']['category'])));
  }
}

/**
 * Generate the search form.
 */
function studyroom_availability_spaces($location, $date) {
  $spaces = $location->getSpaces(TRUE);

  if (!$spaces) {
    return 'NONE FOUND';
  }

  $today = date_now();
  $interval = $today->difference($date, 'days', FALSE);
  if ($interval < 0 && !user_access('see past studyroom_availability')) {
    return 'Cannot search on days before today.';
  }

  $is_today = ($interval == 0) ? TRUE : FALSE;

  $availability = new SpaceAvailability();
  $items = $availability->checkAvailabilityByDate($spaces, $date, $is_today);

  $results = theme('studyroom_availability_day', array(
    'items' => $items,
    'availability' => $availability,
    'location' => $location,
    'date' => $date,
    'spaces' => $spaces,
  ));

  //dpm($availability);

  return $results;
}

function studyroom_availability_spaces_single($space, $date) {
  $spaces = array();
  $spaces[$space->space_id] = $space;

  if (!$spaces) {
    return 'NONE FOUND';
  }

  $today = date_now();
  $interval = $today->difference($date, 'days', FALSE);
  if ($interval < 0 && !user_access('see past studyroom_availability')) {
    return 'Cannot search on days before today.';
  }

  $is_today = ($interval == 0) ? TRUE : FALSE;

  $availability = new SpaceAvailability();
  $items = $availability->checkAvailabilityByDate($spaces, $date, $is_today);

  $results = theme('studyroom_availability_day', array(
    'items' => $items,
    'availability' => $availability,
    'location' => $space->label,
    'date' => $date,
    'spaces' => $spaces,
  ));

  return $results;
}

/**
 * Implements hook_block_info().
 */
function studyroom_availability_block_info() {
  $blocks['studyroom_availability'] = array(
    'info' => t('Studyroom Search'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function studyroom_availability_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'studyroom_availability':
      $block['subject'] = t('Filter By:');
      $form = drupal_get_form('studyroom_availability_search_form');
      // Fix description.
      $form['location']['#description'] = '';
      $block['content'] = $form;
      break;

  }
  return $block;
}

function studyroom_availability_category_update($form, &$form_state) {
  if ($form_state['values']['category'] == 0) {
    unset($form_state['input']['location'], $form_state['values']['location']);
    unset($form['location']["#attributes"]['disabled']);
    $form['location']['#disabled'] = FALSE;
    return form_builder($form['#id'], $form['location'], $form_state);
  } else {
    unset($form_state['input']['location'], $form_state['values']['location']);
    unset($form['location']["#attributes"]['disabled']);
    $form['location']['#disabled'] = TRUE;
    return form_builder($form['#id'], $form['location'], $form_state);
  }
}